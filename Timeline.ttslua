local Timeline = {}

local Constants = require('Constants')
local Log = require('Log').ForModule('Timeline')
local Options = require('Options')
local Ui = require('Ui')

------------------------------------------------------

Timeline.CUSTOM_ASSETS = {
    {
        name = 'checked',
        url = 'http://cloud-3.steamusercontent.com/ugc/2057628267251746049/3647F426FC0701F65CD80005CF410D4C1B7C0BFF/',
    }
}

Timeline.SHEET_POSITION = {24.00, 15.27, 85.95}
Timeline.SHEET_ROTATION = {60.45, 180.00, 0.00}
Timeline.SHEET_SCALE = {16.46, 1.00, 16.46}
Timeline.SHEET_URL = {
    [Constants.CYCLE_I] = 'http://cloud-3.steamusercontent.com/ugc/2064383278577606310/BC5581142434D1EE85307B3769808936B81E659C/',
    [Constants.CYCLE_II] = 'http://cloud-3.steamusercontent.com/ugc/2055377100655086204/93A47A6CA2CE9925253297EECD65CE19C1D06321/',
    [Constants.CYCLE_III] = 'http://cloud-3.steamusercontent.com/ugc/2055377100655086309/124B8FC2229CBFABFD529CA2909A298CC01209C9/',
}

function Timeline.init(savedData)
    if Options.getCurrentCycle() then
        Timeline.reset(savedData)
    end
end

function Timeline.spawnSheet()
    if not Options.getCurrentCycle() then return end

    local timelineSheet = spawnObject({
        type = 'Custom_Tile',
        sound = false,
        position = Timeline.SHEET_POSITION,
        rotation = Timeline.SHEET_ROTATION,
        scale = Timeline.SHEET_SCALE,
        callback_function = function(spawnedObject)
            spawnedObject.setLock(true)
            spawnedObject.addTag(Constants.TIMELINE_SHEET)
            Timeline.reset()
        end
    })
    
    timelineSheet.setCustomObject({
        image = Timeline.SHEET_URL[Options.getCurrentCycle()],
        type = 0,
        thickness = 0.1,
    })

    return timelineSheet
end

function Timeline.reset(params)
    if not Options.getCurrentCycle() then return end
    if not params then params = {} end 

    Timeline.voyage_timeline = params.voyage_timeline or nil
    if not Timeline.voyage_timeline then
        Timeline.voyage_timeline = {}

        if Options.getCurrentCycle() == Constants.CYCLE_I then
            for index = 1, 87 do
                local name = ''
                if index <= 7 then
                    name = 'T' .. tostring(index - 1)
                elseif index > 7 and index < 17 then
                    name = '0' .. tostring(index - 7)
                else
                    name = tostring(index - 7)
                end

                table.insert(Timeline.voyage_timeline, { name = name, checked = false, note = nil })
            end
        elseif Options.getCurrentCycle() == Constants.CYCLE_II then
        elseif Options.getCurrentCycle() == Constants.CYCLE_III then
        end
    end

    Timeline.choice_matrix = params.choice_matrix or nil
    if not Timeline.choice_matrix then
        Timeline.choice_matrix = {}

        if Options.getCurrentCycle() == Constants.CYCLE_I then
            for index = 1, 336 do
                -- This will not keep the order so we'll have to rebuild it
                Timeline.choice_matrix[Timeline.getChoiceName(index)] = false
            end
        elseif Options.getCurrentCycle() == Constants.CYCLE_II then
        elseif Options.getCurrentCycle() == Constants.CYCLE_III then
        end
    end

    Timeline.map_notes = params.map_notes or {}
    Timeline.notes = params.notes
    if Timeline.notes == nil then
        Timeline.notes = {}
        for i = 1, 22 do
            table.insert(Timeline.notes, '')
        end
    end

    Timeline.timeline_sheet = getObjectsWithTag(Constants.TIMELINE_SHEET)[1]
    if not Timeline.timeline_sheet then
        Log:error('Could not find timeline sheet with tag %s', Constants.TIMELINE_SHEET)
        broadcastToAll('Could not find timeline sheet. Create one with tag ' .. Constants.TIMELINE_SHEET 
                .. ' then save and reload.', Color.Red)
    else
        Timeline.createSheetUi(true)
    end
end

function Timeline.createSheetUi(refresh)
    if not Options.getCurrentCycle() then return end
    if not Timeline.timeline_sheet then return end

    Timeline.uiRoot = Ui.createRootOnObject('timeline-sheet-root', Timeline.timeline_sheet, 1.2)
    Timeline.uiRoot:wipe()
    Timeline.ui = {}

    Timeline.timeline_sheet.UI.setCustomAssets(Constants.CUSTOM_ASSETS)

    if Options.getCurrentCycle() == Constants.CYCLE_I then
        Timeline.ui.main_panel = Timeline.uiRoot:panel({ id = 'global-panel', width = 4000, height = 3000 })

        ------------------------
        -- Voyage timeline
        local xStart, yStart = -1262, 793
        local yOffset = -34.7
        for index, day in ipairs(Timeline.voyage_timeline) do
            local jump = 0
            if index <= 47 then
                if index >= 25 then -- Day 18
                    jump = jump - 16
                end
                if index >= 26 then -- Day 19+
                    jump = jump - 17
                end
                if index >= 43 then -- Day 36
                    jump = jump - 17
                end
                if index >= 44 then -- Day 17+
                    jump = jump - 17
                end
            else
                if index >= 61 then -- Day 54
                    jump = jump - 17
                end
                if index >= 62 then -- Day 55+
                    jump = jump - 17
                end
            end

            Timeline.ui['voyage_'..index..'_checkbox'] = Timeline.ui.main_panel:checkbox({ id = 'voyage-' .. index .. '-checkbox',
                                checked = day.checked, width = 35, height = 35,
                                x = xStart + (index > 47 and 641 or 0), 
                                y = yStart + ((index-1)%47) * yOffset + jump, 
                                onClick = function(_, button)
                                    day.checked = not day.checked
                                    Timeline.ui['voyage_'..index..'_checkbox']:setChecked(day.checked)
                                    Log:debug('Voyage day %s set to %s.', day.name, tostring(day.checked))
                                end })

            Timeline.ui['voyage_'..index..'_input'] = Timeline.ui.main_panel:input({ id = 'voyage-' .. index .. '-input',
                                text = day.note, width = (index > 47 and 400 or 475), height = 40,
                                fontSize = 30, colors = Ui.TRANSPARENT_INPUT_COLORS, placeholder = ' ',
                                x = xStart + (index > 47 and 330 or 365) + (index > 47 and 641 or 0), 
                                y = yStart + 2 + ((index-1)%47) * yOffset + jump + ((index == 25 or index == 43 or index == 61) and 15 or 0), 
                                onValueChanged = function(_, newValue)
                                    day.note = newValue
                                    Log:debug('Voyage day note %s set to %s', day.name, day.note)
                                end })
        end

        ------------------------
        -- Choice matrix
        local xStart, yStart = 65, 761
        local xOffset, yOffset = 50, -50
        local xJump, yJump = 7, -7
        local finalYJump = -50
        for index = 1, 336 do
            local name = Timeline.getChoiceName(index)
            local x = xStart + xOffset * ((index - 1) % 12) + xJump * (math.floor((index - 1)/2) % 6)
            local y = yStart + yOffset * math.floor((index - 1)/12) + yJump * math.floor((index - 1)/24) + (index > 312 and finalYJump or 0)

            Timeline.ui['choice_matrix_' .. index .. '_checkbox'] = Timeline.ui.main_panel:checkbox({ 
                id = 'choice_matrix-' .. index .. '-checkbox', 
                width = 65, height = 65, x = x, y = y,
                checked = Timeline.choice_matrix[name], onClick = function(_, button)
                    Timeline.choice_matrix[name] = not Timeline.choice_matrix[name]
                    Timeline.ui['choice_matrix_' .. index .. '_checkbox']:setChecked(Timeline.choice_matrix[name])
                    Log:debug('Choice matrix %s set to %s', name, tostring(Timeline.choice_matrix[index]))
                end })
        end

        ------------------------
        -- Map notes
        local xStart = 768
        for index = 1, 10 do
            Timeline.ui['map_'..index..'_checkbox'] = Timeline.ui.main_panel:checkbox({ id = 'map-' .. index .. '-checkbox',
                                checked = (Timeline.map_notes[index] ~= nil), width = 65, height = 65,
                                x = xStart, y = 795 + (index-1) * -55.5, onClick = function(_, button)
                                    if Timeline.map_notes[index] == nil then
                                        Timeline.map_notes[index] = true
                                        Timeline.ui['map_'..index..'_checkbox']:setChecked(true)
                                        Log:debug('Map note %s activated.', index)
                                    else
                                        Timeline.map_notes[index] = nil
                                        Timeline.ui['map_'..index..'_checkbox']:setChecked(false)
                                        Timeline.ui['map_'..index..'_input']:setText('')
                                        Log:debug('Map note %s deactivated.', index)
                                    end
                                end })

            Timeline.ui['map_'..index..'_input'] = Timeline.ui.main_panel:input({ id = 'map-' .. index .. '-input',
                                text = Timeline.map_notes[index], width = 470, height = 50,
                                fontSize = 35, colors = Ui.TRANSPARENT_INPUT_COLORS, placeholder = ' ',
                                x = xStart + 268, y = 795 + 5 + (index-1) * -55.5, onValueChanged = function(_, newValue)
                                    Timeline.map_notes[index] = newValue
                                    Log:debug('Map note %s set to %s', index, newValue)

                                    if Timeline.map_notes[index] == '' then
                                        Timeline.map_notes[index] = nil
                                        Timeline.ui['map_'..index..'_checkbox']:setChecked(false)
                                        Log:debug('Map note %s deactivated.', index)
                                    elseif Timeline.map_notes[index] and Timeline.map_notes[index] ~= '' then
                                        Timeline.ui['map_'..index..'_checkbox']:setChecked(true)
                                        Log:debug('Map note %s activated.', index)
                                    end
                                end })
        end

        ------------------------
        -- Notes
        for jndex = 1, 22 do
            Timeline.ui['notes_input_' .. jndex] = Timeline.ui.main_panel:input({ id = 'notes-input-' .. jndex, fontSize = 38,
                                    colors = Ui.TRANSPARENT_INPUT_COLORS, 
                                    width = 590, height = 45, x = 985, y = 116 + (jndex-1) * -43.9,
                                    text = Timeline.notes[jndex], placeholder = ' ', onValueChanged = function(_, value)
                Timeline.notes[jndex] = value
                Log:debug('Notes %s set to %s', jndex, Timeline.notes[jndex])
            end })
        end
    end

    if refresh then
        Timeline.uiRoot:refresh()
    end
end

-- Take an index in the matrix (left to right, top to bottom) and return the name of it
function Timeline.getChoiceName(index)
    -- 12 columns
    local columnIndex = ((index - 1) % 12) + 1
    -- 26 + 2 rows
    local rowIndex = math.floor((index-1) / 12) + 1
    -- Get the name from the index
    local character = string.char((rowIndex - 1)%26 + 65)
    local name = character .. (rowIndex > 26 and character or '') .. columnIndex

    return name
end

function Timeline.save()
    local flatData = {
        voyage_timeline = Timeline.voyage_timeline,
        choice_matrix = Timeline.choice_matrix,
        map_notes = Timeline.map_notes,
        notes = Timeline.notes,
    }

    return flatData
end

------------------------------------------------------

return {
    init = Timeline.init,
    save = Timeline.save,
    spawnSheet = Timeline.spawnSheet,
}