local Timeline = {}
Timeline.__index = Timeline

local Constants = require('Constants')
local Log = require('Log').ForModule('Timeline')
local Options = require('Options')
local Ui = require('Ui')

------------------------------------------------------

Timeline.CUSTOM_ASSETS = {
    {
        name = 'checked',
        url = 'http://cloud-3.steamusercontent.com/ugc/2057628267251746049/3647F426FC0701F65CD80005CF410D4C1B7C0BFF/',
    }
}

Timeline.SHEET_POSITION = {24.00, 15.27, 85.95}
Timeline.SHEET_ROTATION = {60.45, 180.00, 0.00}
Timeline.SHEET_SCALE = {16.46, 1.00, 16.46}
Timeline.SHEET_URL = {
    [Constants.CYCLE_I] = 'http://cloud-3.steamusercontent.com/ugc/2064383278577606310/BC5581142434D1EE85307B3769808936B81E659C/',
    [Constants.CYCLE_II] = 'http://cloud-3.steamusercontent.com/ugc/2049748969031541935/CC55C63BF987B8584EB441AED943C9B1546B3F1C/',
    [Constants.CYCLE_III] = 'http://cloud-3.steamusercontent.com/ugc/2049748969031542100/73BDC7C41CDFF5D07AA7643FE50A9A30ED4403F6/',
}

function Timeline.init(savedData)
    Timeline.DATA = {}
    for cycle, _ in pairs(savedData) do
        Timeline.DATA[cycle] = Timeline.create(savedData[cycle])
    end
end

function Timeline.getData(cycle)
    return Timeline.DATA[cycle]
end

function Timeline.spawnSheet(params)
    if not params or not params.cycle then return end

    local timelineSheet = spawnObject({
        type = 'Custom_Tile',
        sound = false,
        position = Timeline.SHEET_POSITION,
        rotation = Timeline.SHEET_ROTATION,
        scale = Timeline.SHEET_SCALE,
        callback_function = function(spawnedObject)
            spawnedObject.setLock(true)
            spawnedObject.addTag(Constants.TIMELINE_SHEET)
            spawnedObject.addTag('Cycle' .. params.cycle)
        end
    })
    
    timelineSheet.setCustomObject({
        image = Timeline.SHEET_URL[params.cycle],
        type = 0,
        thickness = 0.1,
    })

    params.sheetGUID = timelineSheet.getGUID()
    if Timeline.DATA[params.cycle] then
        broadcastToAll('The timeline content for cycle ' .. params.cycle .. ' has been overwritten with a new sheet.\n Reload your save if this was an accident.', Color.Red)
    end
    Timeline.DATA[params.cycle] = Timeline.create(params)

    return Timeline.DATA[params.cycle], timelineSheet
end

function Timeline.create(params)
    if not params or not params.cycle then return end

    local timeline = {
        cycle = params.cycle,
    }
    setmetatable(timeline, Timeline)

    timeline.voyage_timeline = params.voyage_timeline or nil
    if not timeline.voyage_timeline then
        timeline.voyage_timeline = {}

        if timeline.cycle == Constants.CYCLE_I then
            for index = 1, 87 do
                local name = ''
                if index <= 7 then
                    name = 'T' .. tostring(index - 1)
                elseif index > 7 and index < 17 then
                    name = '0' .. tostring(index - 7)
                else
                    name = tostring(index - 7)
                end

                table.insert(timeline.voyage_timeline, { name = name, index = index, checked = false, note = nil })
            end
        elseif timeline.cycle == Constants.CYCLE_II then
            for index = 0, 80 do
                local name = ''
                if index < 10 then
                    name = '0' .. tostring(index)
                else
                    name = tostring(index)
                end

                table.insert(timeline.voyage_timeline, { name = name, index = index, checked = false, note = nil })
            end
        elseif timeline.cycle == Constants.CYCLE_III then
            for index = 0, 90 do
                local name = ''
                if index < 10 then
                    name = '0' .. tostring(index)
                else
                    name = tostring(index)
                end

                table.insert(timeline.voyage_timeline, { name = name, index = index, checked = false, note = nil })
            end
        end
    end

    timeline.pygmalion_track = params.pygmalion_track or nil
    if not timeline.pygmalion_track then
        if timeline.cycle == Constants.CYCLE_I then
            timeline.pygmalion_track = {}
        elseif timeline.cycle == Constants.CYCLE_II then
            timeline.pygmalion_track = { 
                false, false, false, false, false, false,
                false, false, false, false, false, false,
                false, false, false, false, false, false,
                false, false, false, false, false, false,
                false, false, false, false, false, false,
            }
        elseif timeline.cycle == Constants.CYCLE_III then
            timeline.pygmalion_track = {
                false, false, false, false, false, false,
            }
        end

    end

    timeline.choice_matrix = params.choice_matrix or nil
    if not timeline.choice_matrix then
        timeline.choice_matrix = {}

        for index = 1, 336 do
            -- This will not keep the order so we'll have to rebuild it
            timeline.choice_matrix[Timeline.getChoiceName(index)] = false
        end
    end

    timeline.map_notes = params.map_notes or {}
    timeline.notes = params.notes
    if timeline.notes == nil then
        timeline.notes = {}
        for i = 1, 22 do
            table.insert(timeline.notes, '')
        end
    end

    local sheet = nil
    if params.sheetGUID then
        sheet = getObjectFromGUID(params.sheetGUID) 
        timeline.sheetGUID = params.sheetGUID
    else
        sheet = getObjectsWithAllTags({Constants.TIMELINE_SHEET, 'Cycle'..timeline.cycle})[1]
        if sheet then timeline.sheetGUID = sheet.getGUID() end
    end

    if not sheet then
        Log:error('Could not find timeline sheet with tags %s and %s', Constants.TIMELINE_SHEET, 'Cycle' .. timeline.cycle)
        broadcastToAll('Could not find timeline sheet. Create one with tags ' .. Constants.TIMELINE_SHEET .. ' and Cycle' .. timeline.cycle
                .. ' then save and reload.', Color.Red)
        return nil
    else
        timeline:createSheetUi(true)
    end

    return timeline
end

function Timeline:createSheetUi(refresh)
    if not self.cycle then return end
    if not self.sheetGUID then return end

    local sheet = getObjectFromGUID(self.sheetGUID)

    self.ui = {}
    self.ui.root = Ui.createRootOnObject('timeline-sheet-root', sheet, 1.2)
    self.ui.root:wipe()

    sheet.UI.setCustomAssets(Constants.CUSTOM_ASSETS)

    if self.cycle == Constants.CYCLE_I then
        self:createSheetUiForCycleI()
    elseif self.cycle == Constants.CYCLE_II then
        self:createSheetUiForCycleII()
    elseif self.cycle == Constants.CYCLE_III then
        self:createSheetUiForCycleIII()
    end

    if refresh then
        self.ui.root:refresh()
    end
end

function Timeline:createSheetUiForCycleI()
    self.ui.main_panel = self.ui.root:panel({ id = 'global-panel', width = 4000, height = 3000 })

    ------------------------
    -- Voyage timeline
    local xStart, yStart = -1262, 793
    local yOffset = -34.7
    for index, day in ipairs(self.voyage_timeline) do
        local jump = 0
        if index <= 47 then
            if index >= 25 then -- Day 18
                jump = jump - 16
            end
            if index >= 26 then -- Day 19+
                jump = jump - 17
            end
            if index >= 43 then -- Day 36
                jump = jump - 17
            end
            if index >= 44 then -- Day 17+
                jump = jump - 17
            end
        else
            if index >= 61 then -- Day 54
                jump = jump - 17
            end
            if index >= 62 then -- Day 55+
                jump = jump - 17
            end
        end

        self.ui['voyage_'..index..'_checkbox'] = self.ui.main_panel:checkbox({ id = 'voyage-' .. index .. '-checkbox',
                            checked = day.checked, width = 35, height = 35,
                            x = xStart + (index > 47 and 641 or 0), 
                            y = yStart + ((index-1)%47) * yOffset + jump, 
                            onClick = function(_, button)
                                day.checked = not day.checked
                                self.ui['voyage_'..index..'_checkbox']:setChecked(day.checked)
                                Log:debug('Voyage day %s set to %s.', day.name, tostring(day.checked))
                            end })

        self.ui['voyage_'..index..'_input'] = self.ui.main_panel:input({ id = 'voyage-' .. index .. '-input',
                            text = day.note, width = (index > 47 and 425 or 475), height = 40,
                            fontSize = 30, colors = Ui.TRANSPARENT_INPUT_COLORS, placeholder = ' ',
                            x = xStart + (index > 47 and 330 or 365) + (index > 47 and 653.5 or 0), 
                            y = yStart + 2 + ((index-1)%47) * yOffset + jump + ((index == 25 or index == 43 or index == 61) and 15 or 0), 
                            onValueChanged = function(_, newValue)
                                day.note = newValue
                                Log:debug('Voyage day note %s set to %s', day.name, day.note)
                            end })
    end

    ------------------------
    -- Choice matrix
    local xStart, yStart = 65, 761
    local xOffset, yOffset = 50, -50
    local xJump, yJump = 7, -7
    local finalYJump = -50
    for index = 1, 336 do
        local name = Timeline.getChoiceName(index)
        local x = xStart + xOffset * ((index - 1) % 12) + xJump * (math.floor((index - 1)/2) % 6)
        local y = yStart + yOffset * math.floor((index - 1)/12) + yJump * math.floor((index - 1)/24) + (index > 312 and finalYJump or 0)

        self.ui['choice_matrix_' .. name .. '_checkbox'] = self.ui.main_panel:checkbox({ 
            id = 'choice_matrix-' .. name .. '-checkbox', 
            width = 65, height = 65, x = x, y = y,
            checked = self.choice_matrix[name], onClick = function(_, button)
                self:setChoice(name, not self.choice_matrix[name])
            end })
    end

    ------------------------
    -- Map notes
    local xStart = 768
    for index = 1, 10 do
        self.ui['map_'..index..'_checkbox'] = self.ui.main_panel:checkbox({ id = 'map-' .. index .. '-checkbox',
                            checked = (self.map_notes[index] ~= nil), width = 65, height = 65,
                            x = xStart, y = 795 + (index-1) * -55.5, onClick = function(_, button)
                                if self.map_notes[index] == nil then
                                    self.map_notes[index] = true
                                    self.ui['map_'..index..'_checkbox']:setChecked(true)
                                    Log:debug('Map note %s activated.', index)
                                else
                                    self.map_notes[index] = nil
                                    self.ui['map_'..index..'_checkbox']:setChecked(false)
                                    self.ui['map_'..index..'_input']:setText('')
                                    Log:debug('Map note %s deactivated.', index)
                                end
                            end })

        self.ui['map_'..index..'_input'] = self.ui.main_panel:input({ id = 'map-' .. index .. '-input',
                            text = self.map_notes[index], width = 470, height = 50,
                            fontSize = 35, colors = Ui.TRANSPARENT_INPUT_COLORS, placeholder = ' ',
                            x = xStart + 268, y = 795 + 5 + (index-1) * -55.5, onValueChanged = function(_, newValue)
                                self.map_notes[index] = newValue
                                Log:debug('Map note %s set to %s', index, newValue)

                                if self.map_notes[index] == '' then
                                    self.map_notes[index] = nil
                                    self.ui['map_'..index..'_checkbox']:setChecked(false)
                                    Log:debug('Map note %s deactivated.', index)
                                elseif self.map_notes[index] and self.map_notes[index] ~= '' then
                                    self.ui['map_'..index..'_checkbox']:setChecked(true)
                                    Log:debug('Map note %s activated.', index)
                                end
                            end })
    end

    ------------------------
    -- Notes
    for jndex = 1, 22 do
        self.ui['notes_input_' .. jndex] = self.ui.main_panel:input({ id = 'notes-input-' .. jndex, fontSize = 38,
                                colors = Ui.TRANSPARENT_INPUT_COLORS, 
                                width = 590, height = 45, x = 985, y = 116 + (jndex-1) * -43.9,
                                text = self.notes[jndex], placeholder = ' ', onValueChanged = function(_, value)
            self.notes[jndex] = value
            Log:debug('Notes %s set to %s', jndex, self.notes[jndex])
        end })
    end
end

function Timeline:createSheetUiForCycleII()
    self.ui.main_panel = self.ui.root:panel({ id = 'global-panel', width = 4000, height = 3000 })

    ------------------------
    -- Voyage timeline
    local xStart, yStart = -1262, 800
    local yOffset = -34.55
    for index, day in ipairs(self.voyage_timeline) do
        local jump = 0
        if index <= 47 then
            if index >= 23 then -- Day 18
                jump = jump - 16
            end
            if index >= 24 then -- Day 19+
                jump = jump - 17
            end
            if index >= 37 then -- Day 36
                jump = jump - 17
            end
            if index >= 38 then -- Day 17+
                jump = jump - 17
            end
        else
            if index >= 55 then -- Day 54
                jump = jump - 17
            end
            if index >= 56 then -- Day 55+
                jump = jump - 17
            end
        end

        self.ui['voyage_'..index..'_checkbox'] = self.ui.main_panel:checkbox({ id = 'voyage-' .. index .. '-checkbox',
                            checked = day.checked, width = 35, height = 35,
                            x = xStart + (index > 47 and 645 or 0), 
                            y = yStart + ((index-1)%47) * yOffset + jump, 
                            onClick = function(_, button)
                                day.checked = not day.checked
                                self.ui['voyage_'..index..'_checkbox']:setChecked(day.checked)
                                Log:debug('Voyage day %s set to %s.', day.name, tostring(day.checked))
                            end })

        self.ui['voyage_'..index..'_input'] = self.ui.main_panel:input({ id = 'voyage-' .. index .. '-input',
                            text = day.note, width = (index > 47 and 425 or 475), height = 40,
                            fontSize = 30, colors = Ui.TRANSPARENT_INPUT_COLORS, placeholder = ' ',
                            x = xStart + (index > 47 and 331 or 365) + (index > 47 and 653.5 or 0), 
                            y = yStart + 2 + ((index-1)%47) * yOffset + jump + ((index == 25 or index == 43 or index == 61) and 15 or 0), 
                            onValueChanged = function(_, newValue)
                                day.note = newValue
                                Log:debug('Voyage day note %s set to %s', day.name, day.note)
                            end })
    end

    ------------------------
    -- Choice matrix
    local xStart, yStart = 63, 762
    local xOffset, yOffset = 50, -50
    local xJump, yJump = 7, -7
    local finalYJump = -50
    for index = 1, 336 do
        local name = Timeline.getChoiceName(index)
        local x = xStart + xOffset * ((index - 1) % 12) + xJump * (math.floor((index - 1)/2) % 6)
        local y = yStart + yOffset * math.floor((index - 1)/12) + yJump * math.floor((index - 1)/24) + (index > 312 and finalYJump or 0)

        self.ui['choice_matrix_' .. name .. '_checkbox'] = self.ui.main_panel:checkbox({ 
            id = 'choice_matrix-' .. name .. '-checkbox', 
            width = 65, height = 65, x = x, y = y,
            checked = self.choice_matrix[name], onClick = function(_, button)
                self:setChoice(name, not self.choice_matrix[name])
            end })
    end

    ------------------------
    -- Map notes
    local xStart = 766
    for index = 1, 10 do
        self.ui['map_'..index..'_checkbox'] = self.ui.main_panel:checkbox({ id = 'map-' .. index .. '-checkbox',
                            checked = (self.map_notes[index] ~= nil), width = 65, height = 65,
                            x = xStart, y = 795 + (index-1) * -55.5, onClick = function(_, button)
                                if self.map_notes[index] == nil then
                                    self.map_notes[index] = true
                                    self.ui['map_'..index..'_checkbox']:setChecked(true)
                                    Log:debug('Map note %s activated.', index)
                                else
                                    self.map_notes[index] = nil
                                    self.ui['map_'..index..'_checkbox']:setChecked(false)
                                    self.ui['map_'..index..'_input']:setText('')
                                    Log:debug('Map note %s deactivated.', index)
                                end
                            end })

        self.ui['map_'..index..'_input'] = self.ui.main_panel:input({ id = 'map-' .. index .. '-input',
                            text = self.map_notes[index], width = 470, height = 50,
                            fontSize = 35, colors = Ui.TRANSPARENT_INPUT_COLORS, placeholder = ' ',
                            x = xStart + 268, y = 795 + 5 + (index-1) * -55.5, onValueChanged = function(_, newValue)
                                self.map_notes[index] = newValue
                                Log:debug('Map note %s set to %s', index, newValue)

                                if self.map_notes[index] == '' then
                                    self.map_notes[index] = nil
                                    self.ui['map_'..index..'_checkbox']:setChecked(false)
                                    Log:debug('Map note %s deactivated.', index)
                                elseif self.map_notes[index] and self.map_notes[index] ~= '' then
                                    self.ui['map_'..index..'_checkbox']:setChecked(true)
                                    Log:debug('Map note %s activated.', index)
                                end
                            end })
    end

    ------------------------
    -- Notes
    for jndex = 1, 12 do
        self.ui['notes_input_' .. jndex] = self.ui.main_panel:input({ id = 'notes-input-' .. jndex, fontSize = 38,
                                colors = Ui.TRANSPARENT_INPUT_COLORS, 
                                width = 590, height = 45, x = 985, y = 116 + (jndex-1) * -43.9,
                                text = self.notes[jndex], placeholder = ' ', onValueChanged = function(_, value)
            self.notes[jndex] = value
            Log:debug('Notes %s set to %s', jndex, self.notes[jndex])
        end })
    end
end

-- Take an index in the matrix (left to right, top to bottom) and return the name of it
function Timeline.getChoiceName(index)
    -- 12 columns
    local columnIndex = ((index - 1) % 12) + 1
    -- 26 + 2 rows
    local rowIndex = math.floor((index-1) / 12) + 1
    -- Get the name from the index
    local character = string.char((rowIndex - 1)%26 + 65)
    local name = character .. (rowIndex > 26 and character or '') .. columnIndex

    return name
end

function Timeline:getTimelineDay(day)
    for _, timelineDay in ipairs(self.voyage_timeline) do
        if timelineDay.name == day then
            return timelineDay
        end
    end

    return nil
end

function Timeline:setTimelineDay(day, checked, note)
    local timelineDay = self:getTimelineDay(day)
    if not timelineDay then return end

    if checked ~= nil then
        timelineDay.checked = checked
        self.ui['voyage_'..timelineDay.index..'_checkbox']:setChecked(timelineDay.checked)
    end
    if note then
        timelineDay.note = note
        self.ui['voyage_'..timelineDay.index..'_input']:setText(timelineDay.note)
    end
end

function Timeline:setChoice(name, value)
    self.choice_matrix[name] = value
    self.ui['choice_matrix_' .. name .. '_checkbox']:setChecked(self.choice_matrix[name])
    Log:debug('Choice matrix %s set to %s', name, tostring(self.choice_matrix[name]))
end

function Timeline.save()
    local flatData = {}

    for cycle, timeline in pairs(Timeline.DATA) do
        flatData[cycle] = {
            voyage_timeline = timeline.voyage_timeline,
            choice_matrix = timeline.choice_matrix,
            pygmalion_track = timeline.pygmalion_track,
            map_notes = timeline.map_notes,
            notes = timeline.notes,
        }
    end

    return flatData
end

------------------------------------------------------

return {
    init = Timeline.init,
    save = Timeline.save,
    spawnSheet = Timeline.spawnSheet,

    getData = Timeline.getData,
}