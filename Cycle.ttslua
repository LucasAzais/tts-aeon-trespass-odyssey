local Cycle = {}
Cycle.__index = Cycle

local Argo
local Argonaut = require('Argonaut')
local Battle = require('Battle')
local Constants = require('Constants')
local Log = require('Log').ForModule('Cycle')
local Map = require('Map')
local Options = require('Options')
local Timeline = require('Timeline')
local Titan = require('Titan')
local Triskelion = require('Triskelion')
local Ui = require('Ui')
local Utils = require('Utils')

------------------------------------------------------

Cycle.GENERIC_ARCHIVE_GUID = 'b7daa3'
Cycle.CYCLES = {
    [Constants.CYCLE_I] = {
        name = 'Truth of the Labyrinth',
        archiveGUID = '7b2c8d',
    },
    [Constants.CYCLE_II] = {
        name = 'Abysswatchers',
        archiveGUID = '5f7b89',
    },
    [Constants.CYCLE_III] = {
        name = 'Pitiless of the Sun',
        archiveGUID = '548a8b',
        disabled = true,
    },
    [Constants.CYCLE_IV] = {
        name = 'Gardens of Infinite Growth',
        archiveGUID = 'd4dd70',
        disabled = true,
    },
    [Constants.CYCLE_V] = {
        name = 'Truthsayer',
        archiveGUID = 'cf1477',
        disabled = true,
    },
    [Constants.ONWARDS_ODYSSEY] = {
        name = 'Onwards Odyssey',
        archiveGUID = '',
        disabled = true,
    }
}
Cycle.DROP_HEIGHT = 2.00

function Cycle.init(savedData)
    -- Not sure why this is needed tbh... There isn't any cross-loading as far as I can tell
    Argo = require('Argo')

    Cycle.secretBagGUID = savedData.secretBagGUID or nil
end

function Cycle.setupCycle(cycle, params)
    if not Cycle.CYCLES[cycle] then return end

    broadcastToAll('Setting up cycle, please wait (~20s).', Constants.WARNING_COLOR)


    Options.current_cycle = cycle

    -- If new cycle (first time or forced reset)
    if not Options.cycle_count or params.newCampaign == true then -- or Options.cycle_count >= 5 (6th attempt reset?)
        Options.cycle_count = 1
    else
        Options.cycle_count = Options.cycle_count + 1
    end

    if Options.cycle_count == 1 then
        -- Cleanup the non-permanent content
        Cycle.reset()

        -- Add all the generic content
        Cycle.initialSetup()

    -- If moving to the next cycle, delete cycle specific content
    else
        Cycle.resetCycleSpecific()
    end

    -- -- Cycle specific setup
    Cycle.generalSetup(cycle, params)
    Cycle['setupCycle' .. cycle](params)

    Wait.condition(function()
        broadcastToAll('Setup complete.', Color.Green)
    end, function()
        return not Ui.isUiLoading()
    end, 100)
end

function Cycle.initialSetup()
    local genericBag = getObjectFromGUID(Cycle.GENERIC_ARCHIVE_GUID).takeObject({
        smooth = false,
        callback_function = function(spawnedObject)
            spawnedObject.setLock(true)
        end
    })

    local obolCounter = 1
    for _, object in ipairs(genericBag.getObjects()) do
        -- Spawn new clean cycle book if necessary
        if object.gm_notes == 'CycleBook' and Options.cycle_count == 1 then
            -- Remove the previous books then spawn another
            local oldCycleBooks = getObjectsWithTag(Constants.CYCLE_BOOK)
            for i = 1, (#oldCycleBooks or 0) do
                oldCycleBooks[i].destruct()
            end

            genericBag.takeObject({
                guid = object.guid,
                position = {-59.79, 0.98, 15.94},
                rotation = {0.00, 180.00, 0.00},
                smooth = false,
                callback_function = function(spawnedObject)
                    spawnedObject.setLock(true)
                end
            })
        elseif object.gm_notes == 'Argonauts' then
            genericBag.takeObject({
                guid = object.guid,
                position = {7.68, Cycle.DROP_HEIGHT, 55.14},
                rotation = {0.00, 180.00, 0.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'GenericArgonauts' then
            genericBag.takeObject({
                guid = object.guid,
                position = {-7.68, Cycle.DROP_HEIGHT, 55.14},
                rotation = {0.00, 180.00, 0.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'SecretsBag' then
            local bag = genericBag.takeObject({
                guid = object.guid,
                position = {-14.10, 0.80, 65.64},
                rotation = {0.00, 180.00, 0.00},
                smooth = false,
                callback_function = function(spawnedObject)
                    spawnedObject.setLock(true)
                end
            })
            Cycle.secretBagGUID = bag.getGUID()
        elseif object.gm_notes == 'Conditions' then
            genericBag.takeObject({
                guid = object.guid,
                position = {-21.16, Cycle.DROP_HEIGHT, 11.57},
                rotation = {0.00, 180.00, 0.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'TraumaPatterns' then
            genericBag.takeObject({
                guid = object.guid,
                position = {14.76, Cycle.DROP_HEIGHT, 55.14},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'KratosPatterns' then
            genericBag.takeObject({
                guid = object.guid,
                position = {11.21, Cycle.DROP_HEIGHT, 55.14},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'Traits' then
            genericBag.takeObject({
                guid = object.guid,
                position = {4.00, Cycle.DROP_HEIGHT, 55.14},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'GearDeckC1' then
            genericBag.takeObject({
                guid = object.guid,
                position = {-4.16, Cycle.DROP_HEIGHT, 61.02},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'GearDeckC2' then
            genericBag.takeObject({
                guid = object.guid,
                position = {0.00, Cycle.DROP_HEIGHT, 61.02},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'GearDeckC3' then
            genericBag.takeObject({
                guid = object.guid,
                position = {4.16, Cycle.DROP_HEIGHT, 61.02},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'ObolCard' then
            genericBag.takeObject({
                guid = object.guid,
                position = {-18.00 - 2.57 * (obolCounter-1), 1.00, 67.55},
                rotation = {0.00, 180.00, 0.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
            obolCounter = obolCounter + 1
        elseif object.gm_notes == 'KratosDeck' then
            genericBag.takeObject({
                guid = object.guid,
                position = {-5.47, Cycle.DROP_HEIGHT, 12.19},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'MoirosDeck' then
            genericBag.takeObject({
                guid = object.guid,
                position = {-0.98, Cycle.DROP_HEIGHT, 12.19},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        -- The -0.5 on drop height is here because otherwise, when traumas merge during cycle start, 
        -- they might take the Cycle specific tag and get erased later one
        elseif object.gm_notes == 'MinorTraumas' then
            genericBag.takeObject({
                guid = object.guid,
                position = {-9.41, Cycle.DROP_HEIGHT - 0.5, 11.57},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'MajorTraumas' then
            genericBag.takeObject({
                guid = object.guid,
                position = {-12.15, Cycle.DROP_HEIGHT - 0.5, 11.57},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'GraveTraumas' then
            genericBag.takeObject({
                guid = object.guid,
                position = {-15.03, Cycle.DROP_HEIGHT - 0.5, 11.57},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'Obols' then
            genericBag.takeObject({
                guid = object.guid,
                position = {-17.80, Cycle.DROP_HEIGHT - 0.5, 11.57},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        end
    end

    -- Spawn new titan sheet + new argonaut sheets
    Argonaut.spawnSheet({-54.43, 1.98, -64.82})
    Argonaut.spawnSheet({-14.29, 1.98, -64.82})
    Argonaut.spawnSheet({26.00, 1.98, -64.82})
    Argonaut.spawnSheet({65.88, 1.98, -64.82})
    Titan.spawnSheet({-67.60, 0.98, -53.02}, Titan.DREAMWALKER, 'Solon')
    Titan.spawnSheet({-27.14, 0.98, -53.02}, Titan.DREAMWALKER, 'Philoctera')
    Titan.spawnSheet({12.81, 0.98, -53.02}, Titan.DREAMWALKER, 'Herodotus')
    Titan.spawnSheet({53.00, 0.98, -53.02}, Titan.DREAMWALKER, 'Ulyssea')    

    -- Clean up
    genericBag.destruct()
end

function Cycle.generalSetup(cycle, params)
    -- Check parameters
    local useTutorial = params.useTutorial or false
    
    -- Pull out the cycle archive
    local cycleBag = getObjectFromGUID(Cycle.CYCLES[Options.getCurrentCycle()].archiveGUID).takeObject({
        smooth = false,
        callback_function = function(spawnedObject)
            spawnedObject.setLock(true)
        end
    })

    -- Spawn new decks from the archives
    -- Spawn new tiles bag
    local tutorialMapTile, startMapTile = nil, nil
    for _, object in ipairs(cycleBag.getObjects()) do
        if object.gm_notes == 'TutorialBook' and useTutorial then
            -- Remove the previous books then spawn another
            local oldTutorialBooks = getObjectsWithTag(Constants.TUTORIAL_BOOK)
            for i = 1, (#oldTutorialBooks or 0) do
                oldTutorialBooks[i].destruct()
            end

            cycleBag.takeObject({
                guid = object.guid,
                position = {-81.77, 0.98, 15.94},
                rotation = {0.00, 180.00, 0.00},
                smooth = false,
                callback_function = function(spawnedObject)
                    spawnedObject.setLock(true)
                end
            })
        elseif object.gm_notes == 'Mnemos' then
            cycleBag.takeObject({
                guid = object.guid,
                position = {0.00, Cycle.DROP_HEIGHT, 55.14},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'FatedMnemos' then
            cycleBag.takeObject({
                guid = object.guid,
                position = {-4.00, Cycle.DROP_HEIGHT, 55.14},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'MinorTraumas' then
            cycleBag.takeObject({
                guid = object.guid,
                position = {-9.41, Cycle.DROP_HEIGHT, 11.57},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'MajorTraumas' then
            cycleBag.takeObject({
                guid = object.guid,
                position = {-12.15, Cycle.DROP_HEIGHT, 11.57},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'GraveTraumas' then
            cycleBag.takeObject({
                guid = object.guid,
                position = {-15.03, Cycle.DROP_HEIGHT, 11.57},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'Obols' then
            cycleBag.takeObject({
                guid = object.guid,
                position = {-17.80, Cycle.DROP_HEIGHT, 11.57},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif Utils.contains(object.tags, Constants.MAP_TILES_BAG) then
            cycleBag.takeObject({
                guid = object.guid,
                position = {-81.35, 0.80, 51.07},
                rotation = {0.00, 180.00, 0.00},
                smooth = false,
                callback_function = function(spawnedObject)
                    spawnedObject.setLock(true)
                end
            })
        elseif object.gm_notes == 'AlternateMapTilesBag' then
            cycleBag.takeObject({
                guid = object.guid,
                position = {-14.10, 0.80, 69.51},
                rotation = {0.00, 180.00, 0.00},
                smooth = false,
                callback_function = function(spawnedObject)
                    spawnedObject.setLock(true)
                end
            })
        elseif object.gm_notes == 'ExplorationStart' then
            cycleBag.takeObject({
                guid = object.guid,
                position = {-43.40, Cycle.DROP_HEIGHT, 23.50},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'Exploration' then
            cycleBag.takeObject({
                guid = object.guid,
                position = {-14.76, Cycle.DROP_HEIGHT, 55.14},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'StoryCards' then
            cycleBag.takeObject({
                guid = object.guid,
                position = {-5.64, Cycle.DROP_HEIGHT, 68.12},
                rotation = {0.00, 180.00, 0.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'DoomCards' then
            cycleBag.takeObject({
                guid = object.guid,
                position = {5.54, Cycle.DROP_HEIGHT, 68.12},
                rotation = {0.00, 180.00, 0.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'Clues' then
            cycleBag.takeObject({
                guid = object.guid,
                position = {-11.21, Cycle.DROP_HEIGHT, 55.14},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'Technologies' then
            params.techDeck = cycleBag.takeObject({
                guid = object.guid,
                position = {17.39, Cycle.DROP_HEIGHT, 68.12},
                rotation = {0.00, 180.00, 0.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'Pursuer' then
            cycleBag.takeObject({
                guid = object.guid,
                position = {-83.50, Cycle.DROP_HEIGHT, 56.37},
                rotation = {0.00, 180.00, 0.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        end
    end

    -- Reset the Triskelions
    Triskelion.resetAll()

    -- Move last city token back
    local lastCityToken = getObjectFromGUID(Constants.LAST_CITY_TOKEN_GUID)
    if lastCityToken then lastCityToken.setPosition({-81.35, 0.98, 46.46}) end

    -- Move priority target token
    local priorityToken = getObjectFromGUID(Constants.PRIORITY_TARGET_TOKEN_GUID)
    if priorityToken then priorityToken.setPosition({-25.33, 1.03, 7.77}) end

    -- Move figurines
    for _, object in ipairs(getObjectsWithTag(Constants.TITAN)) do
        if object.getGMNotes() == 'Titan1' then
            object.setPosition({-70.66, 0.97, -46.04})
        elseif object.getGMNotes() == 'Titan2' then
            object.setPosition({-30.22, 0.97, -46.04})
        elseif object.getGMNotes() == 'Titan3' then
            object.setPosition({9.68, 0.97, -46.04})
        elseif object.getGMNotes() == 'Titan4' then
            object.setPosition({49.72, 0.97, -46.04})
        end
    end

    -- Set cycle book to the correct state
    local book = getObjectsWithTag(Constants.CYCLE_BOOK)[1]
    if book then book.setState(1) end

    -- Cleanup cycle bag
    cycleBag.destruct()
end

function Cycle.setupCycleI(params)
    -- Check parameters
    local useTutorial = params.useTutorial or false

    -- New Argo/Timeline sheets (takes the current cycle into account)
    Argo.spawnSheet({ cycle = Constants.CYCLE_I, hull = 4, crew = 5 })
    Timeline.spawnSheet({ cycle = Constants.CYCLE_I, })

    local currentArgo = Argo.getData(Constants.CYCLE_I)
    local currentTimeline = Timeline.getData(Constants.CYCLE_I)

    -- Get map tiles out of the bag
    for _, bag in ipairs(getObjectsWithTag(Constants.MAP_TILES_BAG)) do
        for _, tile in ipairs(bag.getObjects()) do
            local position = nil
            if tile.name == 'T00' and useTutorial then
                position = {-77.15, 0.98, 69.96}
                params.tutorialMapTile = tile.guid
            elseif tile.name == '027' then
                position = {-73.39, 0.98, 37.24}
                params.startMapTile = tile.guid
            end

            if position then
                bag.takeObject({
                    guid = tile.guid,
                    position = position,
                    rotation = {0.00, 180.00, 0.00},
                    smooth = false,
                    callback_function = function(spawnedObject)
                        spawnedObject.setLock(true)
                    end
                })
            end
        end
    end

    if useTutorial then
        Map.reset({ discovered_map = { ['T00'] = params.tutorialMapTile, }})
    else
        Map.reset({ discovered_map = { ['027'] = params.startMapTile, }})
    end

    -- Move argo to T00 or 027
    local argoMini = getObjectFromGUID(Constants.ARGO_MINI_GUID)
    local argoPosition = {-73.37, Cycle.DROP_HEIGHT, 37.16}
    if useTutorial then
        argoPosition = {-77.12, Cycle.DROP_HEIGHT, 70.04}
    end
    if argoMini then argoMini.setPosition(argoPosition) end

    -- Grab the tech cards
    for _, card in ipairs(params.techDeck.getObjects()) do
        if card.name == 'Last Tome' then
            params.techDeck.takeObject({
                guid = card.guid,
                position = {37.85, Cycle.DROP_HEIGHT, 71.21},
                rotation = {0, 180, useTutorial and 180 or 0},
                smooth = false,
            })
        elseif card.name == 'Titanogenesis' then
            params.techDeck.takeObject({
                guid = card.guid,
                position = {46.32, Cycle.DROP_HEIGHT, 71.21},
                rotation = {0, 180, useTutorial and 180 or 0},
                smooth = false,
            })
        elseif card.name == 'Argo Works' then
            params.techDeck.takeObject({
                guid = card.guid,
                position = {54.78, Cycle.DROP_HEIGHT, 71.21},
                rotation = {0, 180, useTutorial and 180 or 0},
                smooth = false,
            })
        elseif card.name == 'Antikratos Project' then
            params.techDeck.takeObject({
                guid = card.guid,
                position = {63.24, Cycle.DROP_HEIGHT, 71.21},
                rotation = {0, 180, useTutorial and 180 or 0},
                smooth = false,
            })
        elseif card.name == 'Primordial Dawn' then
            params.techDeck.takeObject({
                guid = card.guid,
                position = {71.70, Cycle.DROP_HEIGHT, 71.21},
                rotation = {0, 180, useTutorial and 180 or 0},
                smooth = false,
            })
        end
    end

    -- Setup gear if skipping the tutorial? + cleanup battle and terrain and all
    -- Setup argo sheet values and timeline skip after tutorial
    Wait.condition(function()
        Wait.time(function()
            -- currentArgo:setHull(4)
            -- currentArgo:setCrew(5)

            -- Add fists
            local fistsCounter = 1
            for _, container in ipairs(getObjects()) do
                if container.getGMNotes() == 'GearDeckC1' then
                    for _, object in ipairs(container.getObjects()) do
                        if object.name == 'Fists' then
                            local positions = {{-58.89, Cycle.DROP_HEIGHT, -50.89},
                                    {-18.26, Cycle.DROP_HEIGHT, -50.89},
                                    {21.43, Cycle.DROP_HEIGHT, -50.89},
                                    {61.99, Cycle.DROP_HEIGHT, -50.89}}
                            container.takeObject({
                                guid = object.guid,
                                position = positions[fistsCounter],
                                rotation = {0.00, 180.00, 0.00},
                                smooth = false,
                                callback_function = function(spawnedObject)
                                end
                            })
                            fistsCounter = fistsCounter + 1
                        end
                    end
                    break
                end
            end

            if useTutorial then
                currentArgo:setEvolutionTrack(1, Constants.HEKATON, true)
                Battle.setupBattle('Tutorial Battle', Constants.LEVEL_0)

                if Options.cycle_count > 1 then
                    local cycleBook = getObjectsWithTag(Constants.CYCLE_BOOK)[1]
                    if cycleBook then cycleBook.Book.setPage(42, true) end
                end
            else
                -- Open Unfathomable Aeons/Tutorial skip page
                local cycleBook = getObjectsWithTag(Constants.CYCLE_BOOK)[1]
                if cycleBook then cycleBook.Book.setPage(42, true) end

                currentArgo:setAdventureTrack(Constants.TUTORIAL, 1, true)
                currentArgo:setAdventureTrack(Constants.TUTORIAL, 2, 1)
                currentArgo:setAdventureTrack(Constants.TUTORIAL, 3, true)
                
                currentTimeline:setTimelineDay('T0', true)
                currentTimeline:setTimelineDay('T1', true)
                currentTimeline:setTimelineDay('T2', true)
                currentTimeline:setTimelineDay('T3', true)
                currentTimeline:setTimelineDay('T4', true)
                currentTimeline:setTimelineDay('T5', true)
                currentTimeline:setTimelineDay('T6', true)
                
                -- Mark A7 or A8
                if math.random(1, 2) == 1 then
                    currentTimeline:setChoice('A7', true)
                else
                    currentTimeline:setChoice('A8', true)
                end

                -- Gain resources
                currentArgo:setResource('raw_ambrosia', 4)
                currentArgo:setResource('calcified_knuckle_bone', 1)
                currentArgo:setResource('muscle_cluster', 1)
                currentArgo:setResource('sisyphus_tears', 1)

                -- -- Set doom card on the argo sheet (tbh it's useless considering TTS saves everything)
                -- currentArgo:setDoomCard('1A')
                -- currentArgo:setMapTile('27')

                -- Set AA and titan limit
                currentArgo:setAbilitiesLimit(2)
                currentArgo:setTitansLimit(10)
                currentArgo:setCurrentTitans(8)
                currentArgo:setTitansList1(1, 'Dreamwalker x8')

                currentArgo:setEvolutionTrack(1, Constants.HEKATON, true)

                -- Go through all the decks and pull out specific cards
                for _, container in ipairs(getObjects()) do
                    if container.getGMNotes() == 'Mnemos' then
                        for _, card in ipairs(container.getObjects()) do
                            if card.name == 'Imprisonment' then
                                container.takeObject({
                                    guid = card.guid,
                                    position = {43.98, Cycle.DROP_HEIGHT, 1.77},
                                    rotation = {0.00, 180.00, 180.00},
                                })
                            elseif card.name == 'Siren Survivor' then
                                container.takeObject({
                                    guid = card.guid,
                                    position = {40.27, Cycle.DROP_HEIGHT, 1.79},
                                    rotation = {0.00, 180.00, 180.00},
                                })
                            end
                        end
                    elseif container.getGMNotes() == 'Technologies' then
                        for _, card in ipairs(container.getObjects()) do
                            if card.name == 'Trireme Weapons' then
                                container.takeObject({
                                    guid = card.guid,
                                    position = {35.45, Cycle.DROP_HEIGHT, 64.73},
                                    rotation = {0.00, 180.00, 180.00},
                                })
                            elseif card.name == 'Trireme Armor' then
                                container.takeObject({
                                    guid = card.guid,
                                    position = {39.15, Cycle.DROP_HEIGHT, 64.73},
                                    rotation = {0.00, 180.00, 180.00},
                                })
                            elseif card.name == 'Trireme Ranged Weapons' then
                                container.takeObject({
                                    guid = card.guid,
                                    position = {42.85, Cycle.DROP_HEIGHT, 64.73},
                                    rotation = {0.00, 180.00, 180.00},
                                })
                            -- Project deck
                            elseif card.name == 'Rhetoric' or card.name == 'Titan Hunting' or card.name == 'Trading Solutions'
                                    or card.name == 'Arrow Barrage' or card.name == 'Siren Armor' then
                                container.takeObject({
                                    guid = card.guid,
                                    position = {28.28, Cycle.DROP_HEIGHT, 64.78},
                                    rotation = {0.00, 180.00, 0.00},
                                })
                            end
                        end
                    elseif container.getGMNotes() == 'DoomCards' then
                        -- 1A + 2 doom
                        for _, card in ipairs(container.getObjects()) do
                            if card.name == 'Shape Of Things To Come' then
                                container.takeObject({
                                    guid = card.guid,
                                    position = {5.29, Cycle.DROP_HEIGHT, 44.33},
                                    rotation = {0.00, 180.00, 0.00},
                                    callback_function = function(spawnedObject)
                                        getObjectFromGUID('df1c9e').takeObject({ position = {1.36, 1.38, 43.37} })
                                        getObjectFromGUID('df1c9e').takeObject({ position = {2.12, 2.37, 43.26} })
                                    end
                                })
                            end
                        end
                    elseif container.getGMNotes() == 'StoryCards' then
                        -- Inward odyssey + 1 progress
                        for _, card in ipairs(container.getObjects()) do
                            if card.name == 'Inward Odyssey' then
                                container.takeObject({
                                    guid = card.guid,
                                    position = {-5.80, Cycle.DROP_HEIGHT, 36.57},
                                    rotation = {0.00, 180.00, 0.00},
                                    callback_function = function(spawnedObject)
                                        getObjectFromGUID('2dca67').takeObject({ position = {-2.14, 1.38, 34.02} })
                                    end
                                })
                            end
                        end
                    elseif container.getGMNotes() == 'GearDeckC1' then
                        local foundCards = {}
                        for _, card in ipairs(container.getObjects()) do
                            if card.name == 'Sail Spolas' and not foundCards['Sail Spolas'] then
                                container.takeObject({
                                    guid = card.guid,
                                    position = {39.73, Cycle.DROP_HEIGHT, -5.11},
                                    rotation = {0.00, 180.00, 0.00},
                                })
                                foundCards['Sail Spolas'] = true
                            elseif card.name == 'Boatmace' and not foundCards['Boatmace'] then
                                container.takeObject({
                                    guid = card.guid,
                                    position = {42.30, Cycle.DROP_HEIGHT, -5.11},
                                    rotation = {0.00, 180.00, 0.00},
                                })
                                foundCards['Boatmace'] = true
                            elseif card.name == 'Kratos Kopis' and not foundCards['Kratos Kopis'] then
                                container.takeObject({
                                    guid = card.guid,
                                    position = {44.87, Cycle.DROP_HEIGHT, -5.11},
                                    rotation = {0.00, 180.00, 0.00},
                                })
                                foundCards['Kratos Kopis'] = true
                            elseif card.name == 'Siren Panoply Armor' and not foundCards['Siren Panoply Armor'] then
                                container.takeObject({
                                    guid = card.guid,
                                    position = {39.73, Cycle.DROP_HEIGHT, -9.10},
                                    rotation = {0.00, 180.00, 0.00},
                                })
                                foundCards['Siren Panoply Armor'] = true
                            elseif card.name == 'Sirenteeth' and not foundCards['Sirenteeth'] then
                                container.takeObject({
                                    guid = card.guid,
                                    position = {42.30, Cycle.DROP_HEIGHT, -9.10},
                                    rotation = {0.00, 180.00, 0.00},
                                })
                                foundCards['Sirenteeth'] = true
                            elseif card.name == 'Shipwrecker Shield' and not foundCards['Shipwrecker Shield'] then
                                container.takeObject({
                                    guid = card.guid,
                                    position = {44.87, Cycle.DROP_HEIGHT, -9.10},
                                    rotation = {0.00, 180.00, 0.00},
                                })
                                foundCards['Shipwrecker Shield'] = true
                            end
                        end
                    end
                end

                -- Ping new gear location
                Player.getPlayers()[1].pingTable({42.30, 1.01, -1.90})
                broadcastToAll('Don\'t forget to assign 1 Mnenos node to Imprisonment.', Constants.WARNING_COLOR)
                broadcastToAll('Follow the "Skipping the Tutorial" instructions.', Constants.WARNING_COLOR)
                if Options.cycle_count > 1 then
                    broadcastToAll('Follow the "Unfathomable Aeons" instructions.', Constants.WARNING_COLOR)
                end
            end
        end, 0.1)
    end, function()
        return not Ui.isUiLoading()
    end, 60, function()
        broadcastToAll('Could not set tutorial skip information, alter the Argo sheet and Timeline manually.', Color.Red)
    end)
end

function Cycle.setupCycleII(params)
    -- Check parameters
    local useTutorial = params.useTutorial or false

    -- Get the cycle I data
    local c1Argo = Argo.getData(Constants.CYCLE_I)

    local currentArgo, _ = Argo.spawnSheet({ cycle = Constants.CYCLE_II, hull = 5, crew = 5, current_titans = 10, argo_knowledge = 20,
                max_titans = 15, abilities_limit = c1Argo and c1Argo.abilities_limit or 0, })
    local currentTimeline, _ = Timeline.spawnSheet({ cycle = Constants.CYCLE_II, })

    -- Get map tiles out of the bag
    for _, bag in ipairs(getObjectsWithTag(Constants.MAP_TILES_BAG)) do
        for _, tile in ipairs(bag.getObjects()) do
            local position = nil
            if tile.name == '078' then
                position = {-73.39, 0.98, 28.57}
                params.startMapTile = tile.guid
            end

            if position then
                bag.takeObject({
                    guid = tile.guid,
                    position = position,
                    rotation = {0.00, 180.00, 0.00},
                    smooth = false,
                    callback_function = function(spawnedObject)
                        spawnedObject.setLock(true)
                    end
                })
            end
        end
    end
    
    Map.reset({ discovered_map = { ['078'] = params.startMapTile, }})

    -- Move argo to 078
    local argoMini = getObjectFromGUID(Constants.ARGO_MINI_GUID)
    local argoPosition = {-74.28, Cycle.DROP_HEIGHT, 27.83}
    if argoMini then argoMini.setPosition(argoPosition) end

    -- Grab the secret cards
    local secretBag = getObjectFromGUID(Cycle.secretBagGUID)
    for _, card in ipairs(secretBag.getObjects()) do
        -- Grab Tech cards
        if card.name == 'Forgotten Knowledge' then
            secretBag.takeObject({
                guid = card.guid,
                position = {37.85, Cycle.DROP_HEIGHT, 71.21},
                rotation = {0, 90, 0},
                smooth = false,
            })
        elseif card.name == 'Titanomorphosis' then
            secretBag.takeObject({
                guid = card.guid,
                position = {46.32, Cycle.DROP_HEIGHT, 71.21},
                rotation = {0, 90, 0},
                smooth = false,
            })
        elseif card.name == 'Argo Works II' then
            secretBag.takeObject({
                guid = card.guid,
                position = {54.78, Cycle.DROP_HEIGHT, 71.21},
                rotation = {0, 90, 0},
                smooth = false,
            })
        elseif card.name == 'Temenos Project' then
            secretBag.takeObject({
                guid = card.guid,
                position = {63.24, Cycle.DROP_HEIGHT, 71.21},
                rotation = {0, 90, 0},
                smooth = false,
            })
        elseif card.name == 'Argo\'s Mission' then
            secretBag.takeObject({
                guid = card.guid,
                position = {71.70, Cycle.DROP_HEIGHT, 71.21},
                rotation = {0, 90, 0},
                smooth = false,
            })
        elseif card.name == 'Violent Awakening' then
            -- Add Kratos card
            secretBag.takeObject({
                guid = card.guid,
                position = {-5.47, Cycle.DROP_HEIGHT, 12.19},
                rotation = {0, 180, 180},
                smooth = false,
            })
        end
    end

    for _, card in ipairs(getObjects()) do
        if card.getName() == 'Titanogenesis' then
            card.setPosition({46.32, Cycle.DROP_HEIGHT, 65.95})
        end
    end

    broadcastToAll('Perform a Divine Surge then read 001.', Constants.WARNING_COLOR)
end

function Cycle.reset()
    Battle.cleanupCurrentBattle()

    -- Destroy everything that is not tagged persistent
    for _, object in ipairs(getObjects()) do
        if not object.hasTag(Constants.PERSISTENT) 
                and object.type ~= 'Scripting'
                and object.type ~= 'Checker'
                and object.type ~= 'Hand' then
            object.destruct()
        end
    end
end

function Cycle.resetCycleSpecific()
    Battle.cleanupCurrentBattle()

    -- Push existing Argo/Timeline sheets to the side
    local sheets = getObjectsWithTag(Constants.ARGO_SHEET)
    for _, sheet in ipairs(sheets) do
        sheet.setPosition(sheet.getPosition() + Vector(-48.00, 0, 0))
    end

    sheets = getObjectsWithTag(Constants.TIMELINE_SHEET)
    for _, sheet in ipairs(sheets) do
        sheet.setPosition(sheet.getPosition() + Vector(48.00, 0, 0))
    end

    -- Destroy everything that is tagged cycle specific
    -- Labeled with specific cycles in case we need that information someday...
    for _, container in ipairs(getObjects()) do
        if not container.hasTag(Constants.ARGO_SHEET) 
                and not container.hasTag(Constants.TIMELINE_SHEET) then
            if container.hasTag(Constants.CYCLE_SPECIFIC_I)
                or container.hasTag(Constants.CYCLE_SPECIFIC_II)
                or container.hasTag(Constants.CYCLE_SPECIFIC_III)
                or container.hasTag(Constants.CYCLE_SPECIFIC_IV)
                or container.hasTag(Constants.CYCLE_SPECIFIC_V) then
                container.destruct()
            -- Since these can stay between cycles, BUT we need to delete the decks...
            -- This clearly isn't foolproof, adding direct card tags to detect Mnemoses might be a good idea
            elseif container.getGMNotes() == 'Mnemos'
                    or container.getGMNotes() == 'FatedMnemos' then
                container.destruct()
            elseif container.type == 'Bag' or container.type == 'Deck' then
                for _, object in ipairs(container.getObjects()) do
                    if Utils.contains(object.tags, Constants.CYCLE_SPECIFIC_I)
                        or Utils.contains(object.tags, Constants.CYCLE_SPECIFIC_II)
                        or Utils.contains(object.tags, Constants.CYCLE_SPECIFIC_III)
                        or Utils.contains(object.tags, Constants.CYCLE_SPECIFIC_IV)
                        or Utils.contains(object.tags, Constants.CYCLE_SPECIFIC_V) then
                        container.takeObject({
                            guid = object.guid,
                            smooth = false,
                            callback_function = function(spawnedObject)
                                spawnedObject.destruct()
                            end
                        })

                        if container.remainder then
                            if Utils.contains(object.tags, Constants.CYCLE_SPECIFIC_I)
                            or Utils.contains(object.tags, Constants.CYCLE_SPECIFIC_II)
                            or Utils.contains(object.tags, Constants.CYCLE_SPECIFIC_III)
                            or Utils.contains(object.tags, Constants.CYCLE_SPECIFIC_IV)
                            or Utils.contains(object.tags, Constants.CYCLE_SPECIFIC_V) then
                                container.remainder.destruct()
                            end

                            break
                        end
                    end
                end
            end
        end
    end
end

function Cycle.missingContent()
    broadcastToAll('Some of the content is missing or has been deleted. Please load a new blank save.', Color.Red)
end

function Cycle.save()
    local flatData = {
        secretBagGUID = Cycle.secretBagGUID
    }

    return flatData
end

------------------------------------------------------

return {
    init = Cycle.init,
    save = Cycle.save,
    setupCycle = Cycle.setupCycle,

    CYCLES = Cycle.CYCLES,
}