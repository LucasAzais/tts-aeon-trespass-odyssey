local Cycle = {}
Cycle.__index = Cycle

local Argo
local Argonaut = require('Argonaut')
local Battle = require('Battle')
local Constants = require('Constants')
local Log = require('Log').ForModule('Cycle')
local Map = require('Map')
local Options = require('Options')
local Timeline = require('Timeline')
local Titan = require('Titan')
local Triskelion = require('Triskelion')
local Ui = require('Ui')
local Utils = require('Utils')

------------------------------------------------------

Cycle.CYCLES = {
    [Constants.CYCLE_I] = {
        name = 'Truth of the Labyrinth',
        archiveGUID = '7b2c8d',
    },
    [Constants.CYCLE_II] = {
        name = 'Abysswatchers',
        archiveGUID = '',
        disabled = true,
    },
    [Constants.CYCLE_III] = {
        name = 'Pitiless of the Sun',
        archiveGUID = '',
        disabled = true,
    },
    [Constants.CYCLE_IV] = {
        name = 'Gardens of Infinite Growth',
        archiveGUID = '',
        disabled = true,
    },
    [Constants.CYCLE_V] = {
        name = 'Truthsayer',
        archiveGUID = '',
        disabled = true,
    },
    [Constants.ONWARDS_ODYSSEY] = {
        name = 'Onwards Odyssey',
        archiveGUID = '',
        disabled = true,
    }
}

function Cycle.init()
    -- Not sure why this is needed tbh... There isn't any cross-loading as far as I can tell
    Argo = require('Argo')
end

function Cycle.setupCycle(cycle, params)
    if not Cycle.CYCLES[cycle] then return end

    broadcastToAll('Setting up cycle, please wait (~20s).', Constants.WARNING_COLOR)
    Cycle['setupCycle' .. cycle](params)

    Wait.condition(function()
        broadcastToAll('Setup complete.', Color.Green)
    end, function()
        return not Ui.isUiLoading()
    end, 100)
end

function Cycle.setupCycleI(params)
    -- Cleanup the old cycle content
    Cycle.reset()

    -- Identify as cycle I
    Options.current_cycle = Constants.CYCLE_I
    local useTutorial = params.useTutorial or false

    -- If new cycle (first time or forced reset)
    if not Options.cycle_count or params.resetFatedBoxes == true then -- or Options.cycle_count >= 5 (6th attempt reset?)
        Options.cycle_count = 1
    else
        Options.cycle_count = Options.cycle_count + 1
    end

    -- Pull out the cycle archive
    local cycle1Bag = getObjectFromGUID(Cycle.CYCLES[Constants.CYCLE_I].archiveGUID).takeObject({
        smooth = false,
        callback_function = function(spawnedObject)
            spawnedObject.setLock(true)
        end
    })

    -- Spawn new decks (top ones + stories + doom + moiros + trauma + kratos + etc) from the archives
    -- Spawn new tiles bag
    local obolCounter, fistsCounter = 1, 1
    local tutorialMapTile, startMapTile = nil, nil
    for _, object in ipairs(cycle1Bag.getObjects()) do
        -- Spawn new clean cycle book if necessary
        if object.gm_notes == 'CycleBook' and Options.cycle_count == 1 then
            -- Remove the previous books then spawn another
            local oldCycleBooks = getObjectsWithTag(Constants.CYCLE_BOOK)
            for i = 1, (#oldCycleBooks or 0) do
                oldCycleBooks[i].destruct()
            end

            cycle1Bag.takeObject({
                guid = object.guid,
                position = {-59.79, 0.98, 15.94},
                rotation = {0.00, 180.00, 0.00},
                smooth = false,
                callback_function = function(spawnedObject)
                    spawnedObject.setLock(true)
                end
            })
        elseif object.gm_notes == 'TutorialBook' and useTutorial then
            -- Remove the previous books then spawn another
            local oldTutorialBooks = getObjectsWithTag(Constants.TUTORIAL_BOOK)
            for i = 1, (#oldTutorialBooks or 0) do
                oldTutorialBooks[i].destruct()
            end

            cycle1Bag.takeObject({
                guid = object.guid,
                position = {-81.77, 0.98, 15.94},
                rotation = {0.00, 180.00, 0.00},
                smooth = false,
                callback_function = function(spawnedObject)
                    spawnedObject.setLock(true)
                end
            })
        elseif object.gm_notes == 'ObolCard' then
            cycle1Bag.takeObject({
                guid = object.guid,
                position = {-18.00 - 2.57 * (obolCounter-1), 1.00, 67.55},
                rotation = {0.00, 180.00, 0.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
            obolCounter = obolCounter + 1
        elseif object.gm_notes == 'MapTile' then
            local position = nil
            if object.name == 'T00' then
                position = {-77.15, 0.98, 69.96}
                tutorialMapTile = object.guid
            else
                position = {-73.39, 0.98, 37.24}
                startMapTile = object.guid
            end

            if object.name ~= 'T00' or useTutorial then
                cycle1Bag.takeObject({
                    guid = object.guid,
                    position = position,
                    rotation = {0.00, 180.00, 0.00},
                    smooth = false,
                    callback_function = function(spawnedObject)
                        spawnedObject.setLock(true)
                    end
                })
            end
        elseif object.gm_notes == 'SecretsBag' then
            cycle1Bag.takeObject({
                guid = object.guid,
                position = {-14.10, 0.80, 65.64},
                rotation = {0.00, 180.00, 0.00},
                smooth = false,
                callback_function = function(spawnedObject)
                    spawnedObject.setLock(true)
                end
            })
        elseif object.gm_notes == 'Gear' then
            if object.name == 'Fists' then
                local positions = {{-58.89, 1.00, -50.89}, {-18.26, 1.49, -50.89}, {21.43, 1.49, -50.89}, {61.99, 1.49, -50.89}}
                cycle1Bag.takeObject({
                    guid = object.guid,
                    position = positions[fistsCounter],
                    rotation = {0.00, 180.00, 0.00},
                    smooth = false,
                    callback_function = function(spawnedObject)
                    end
                })
            end
        elseif object.gm_notes == 'TraumaPatterns' then
            cycle1Bag.takeObject({
                guid = object.guid,
                position = {9.13, 1.03, 60.60},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'KratosPatterns' then
            cycle1Bag.takeObject({
                guid = object.guid,
                position = {6.00, 1.05, 60.60},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'Argonauts' then
            cycle1Bag.takeObject({
                guid = object.guid,
                position = {-0.13, 1.01, 60.62},
                rotation = {0.00, 180.00, 0.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'GenericArgonauts' then
            cycle1Bag.takeObject({
                guid = object.guid,
                position = {3.04, 1.02, 60.60},
                rotation = {0.00, 180.00, 0.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'Traits' then
            cycle1Bag.takeObject({
                guid = object.guid,
                position = {-3.60, 1.01, 60.62},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'Mnemos' then
            cycle1Bag.takeObject({
                guid = object.guid,
                position = {-7.55, 1.07, 60.62},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'FatedMnemos' then
            cycle1Bag.takeObject({
                guid = object.guid,
                position = {-11.52, 1.05, 60.62},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'MinorTraumas' then
            cycle1Bag.takeObject({
                guid = object.guid,
                position = {-9.41, 1.07, 11.57},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'MajorTraumas' then
            cycle1Bag.takeObject({
                guid = object.guid,
                position = {-12.15, 1.07, 11.57},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'GraveTraumas' then
            cycle1Bag.takeObject({
                guid = object.guid,
                position = {-15.03, 1.07, 11.57},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'Obols' then
            cycle1Bag.takeObject({
                guid = object.guid,
                position = {-17.80, 1.01, 11.57},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'Conditions' then
            cycle1Bag.takeObject({
                guid = object.guid,
                position = {-21.16, 1.04, 11.57},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'MapTilesBag' then
            cycle1Bag.takeObject({
                guid = object.guid,
                position = {-81.35, 0.80, 51.07},
                rotation = {0.00, 180.00, 0.00},
                smooth = false,
                callback_function = function(spawnedObject)
                    spawnedObject.setLock(true)
                end
            })
        elseif object.gm_notes == 'AlternateMapTilesBag' then
            cycle1Bag.takeObject({
                guid = object.guid,
                position = {-14.10, 0.80, 69.51},
                rotation = {0.00, 180.00, 0.00},
                smooth = false,
                callback_function = function(spawnedObject)
                    spawnedObject.setLock(true)
                end
            })
        elseif object.gm_notes == 'ExplorationStart' then
            cycle1Bag.takeObject({
                guid = object.guid,
                position = {-43.40, 1.08, 23.50},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'Exploration' then
            cycle1Bag.takeObject({
                guid = object.guid,
                position = {-15.17, 1.12, 60.33},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'StoryCards' then
            cycle1Bag.takeObject({
                guid = object.guid,
                position = {-5.64, 1.03, 68.12},
                rotation = {0.00, 180.00, 0.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'DoomCards' then
            cycle1Bag.takeObject({
                guid = object.guid,
                position = {5.54, 1.02, 68.12},
                rotation = {0.00, 180.00, 0.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'Clues' then
            cycle1Bag.takeObject({
                guid = object.guid,
                position = {15.55, 1.11, 60.54},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'Technologies' then
            cycle1Bag.takeObject({
                guid = object.guid,
                position = {17.39, 1.21, 68.12},
                rotation = {0.00, 180.00, 0.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'KratosDeck' then
            cycle1Bag.takeObject({
                guid = object.guid,
                position = {-5.47, 1.03, 12.19},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'MoirosDeck' then
            cycle1Bag.takeObject({
                guid = object.guid,
                position = {-0.98, 1.04, 12.19},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'Pursuer' then
            cycle1Bag.takeObject({
                guid = object.guid,
                position = {-83.50, 0.98, 56.37},
                rotation = {0.00, 180.00, 0.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        elseif object.gm_notes == 'GearDeck' then
            cycle1Bag.takeObject({
                guid = object.guid,
                position = {12.29, 1.53, 60.54},
                rotation = {0.00, 180.00, 180.00},
                smooth = false,
                callback_function = function(spawnedObject)
                end
            })
        end
    end

    -- New Argo/Timeline sheets (takes the current cycle into account)
    Argo.spawnSheet()
    Timeline.spawnSheet()
    if useTutorial then
        Map.reset({ discovered_map = { ['T00'] = tutorialMapTile, }})
    else
        Map.reset({ discovered_map = { ['027'] = startMapTile, }})
    end
    
    -- Spawn new titan sheet + reset triskelion + new argonaut sheets
    Triskelion.resetAll()
    Argonaut.spawnSheet({-54.43, 1.98, -64.82})
    Argonaut.spawnSheet({-14.29, 1.98, -64.82})
    Argonaut.spawnSheet({26.00, 1.98, -64.82})
    Argonaut.spawnSheet({65.88, 1.98, -64.82})
    Titan.spawnSheet({-67.60, 0.98, -53.02}, Titan.DREAMWALKER, 'Solon')
    Titan.spawnSheet({-27.14, 0.98, -53.02}, Titan.DREAMWALKER, 'Philoctera')
    Titan.spawnSheet({12.81, 0.98, -53.02}, Titan.DREAMWALKER, 'Herodotus')
    Titan.spawnSheet({53.00, 0.98, -53.02}, Titan.DREAMWALKER, 'Ulyssea')

    -- Move figurines
    for _, object in ipairs(getObjectsWithTag(Constants.TITAN)) do
        if object.getGMNotes() == 'Titan1' then
            object.setPosition({-70.66, 0.97, -46.04})
        elseif object.getGMNotes() == 'Titan2' then
            object.setPosition({-30.22, 0.97, -46.04})
        elseif object.getGMNotes() == 'Titan3' then
            object.setPosition({9.68, 0.97, -46.04})
        elseif object.getGMNotes() == 'Titan4' then
            object.setPosition({49.72, 0.97, -46.04})
        end
    end

    -- Move argo to T00 or 027
    local argoMini = getObjectFromGUID(Constants.ARGO_MINI_GUID)
    local argoPosition = {-73.37, 1.08, 37.16}
    if useTutorial then
        argoPosition = {-77.12, 1.08, 70.04}
    end
    if argoMini then argoMini.setPosition(argoPosition) end

    -- Move last city token back
    local lastCityToken = getObjectFromGUID(Constants.LAST_CITY_TOKEN_GUID)
    if lastCityToken then lastCityToken.setPosition({-81.35, 0.98, 46.46}) end

    -- Move priority target token
    local priorityToken = getObjectFromGUID(Constants.PRIORITY_TARGET_TOKEN_GUID)
    if priorityToken then priorityToken.setPosition({-25.33, 1.03, 7.77}) end

    -- Cleanup cycle bag
    cycle1Bag.destruct()

    -- Reset the tech cards
    local lastTomeTech = getObjectFromGUID('ac82bc')
    if not lastTomeTech then Cycle.missingContent() end
    lastTomeTech.setPosition({37.85, 1.10, 71.21})
    lastTomeTech.setRotation({0, 180, useTutorial and 180 or 0})
    local titanogenesisTech = getObjectFromGUID('e9aca4')
    if not titanogenesisTech then Cycle.missingContent() end
    titanogenesisTech.setPosition({46.32, 1.10, 71.21})
    titanogenesisTech.setRotation({0, 180, useTutorial and 180 or 0})
    local argoWorksTech = getObjectFromGUID('d0a69e')
    if not argoWorksTech then Cycle.missingContent() end
    argoWorksTech.setPosition({54.78, 1.10, 71.21})
    argoWorksTech.setRotation({0, 180, useTutorial and 180 or 0})
    local antikratosProjectTech = getObjectFromGUID('33d9a4')
    if not antikratosProjectTech then Cycle.missingContent() end
    antikratosProjectTech.setPosition({63.24, 1.10, 71.21})
    antikratosProjectTech.setRotation({0, 180, useTutorial and 180 or 0})
    local primordialDawnTech = getObjectFromGUID('bc7de7')
    if not primordialDawnTech then Cycle.missingContent() end
    primordialDawnTech.setPosition({71.70, 1.10, 71.21})
    primordialDawnTech.setRotation({0, 180, useTutorial and 180 or 0})

    -- Setup gear if skipping the tutorial? + cleanup battle and terrain and all
    -- Setup argo sheet values and timeline skip after tutorial
    Wait.condition(function()
        Wait.time(function()
            Argo.setHull(4)
            Argo.setCrew(5)
            
            if useTutorial then
                Argo.setEvolutionTrack(1, Constants.HEKATON, true)
                Battle.setupBattle('Tutorial Battle', Constants.LEVEL_0)
            else
                -- Open Unfathomable Aeons/Tutorial skip page
                local cycleBook = getObjectsWithTag(Constants.CYCLE_BOOK)[1]
                if cycleBook then cycleBook.Book.setPage(42, true) end

                Argo.setAdventureTrack(Constants.TUTORIAL, 1, true)
                Argo.setAdventureTrack(Constants.TUTORIAL, 2, 1)
                Argo.setAdventureTrack(Constants.TUTORIAL, 3, true)
                
                Timeline.setTimelineDay('T0', true)
                Timeline.setTimelineDay('T1', true)
                Timeline.setTimelineDay('T2', true)
                Timeline.setTimelineDay('T3', true)
                Timeline.setTimelineDay('T4', true)
                Timeline.setTimelineDay('T5', true)
                Timeline.setTimelineDay('T6', true)
                
                -- Mark A7 or A8
                if math.random(1, 2) == 1 then
                    Timeline.setChoice('A7', true)
                else
                    Timeline.setChoice('A8', true)
                end

                -- Gain resources
                Argo.setResource('raw_ambrosia', 4)
                Argo.setResource('calcified_knuckle_bone', 1)
                Argo.setResource('muscle_cluster', 1)
                Argo.setResource('sisyphus_tears', 1)

                -- -- Set doom card on the argo sheet (tbh it's useless considering TTS saves everything)
                -- Argo.setDoomCard('1A')
                -- Argo.setMapTile('27')

                -- Set AA and titan limit
                Argo.setAbilitiesLimit(2)
                Argo.setTitansLimit(10)
                Argo.setCurrentTitans(8)
                Argo.setTitansList1(1, 'Dreamwalker x8')

                Argo.setEvolutionTrack(1, Constants.HEKATON, true)

                -- Go through all the decks and pull out specific cards
                for _, container in ipairs(getObjects()) do
                    if container.getGMNotes() == 'Mnemos' then
                        for _, card in ipairs(container.getObjects()) do
                            if card.name == 'Imprisonment' then
                                container.takeObject({
                                    guid = card.guid,
                                    position = {43.98, 1.10, 1.77},
                                    rotation = {0.00, 180.00, 0.00},
                                })
                            elseif card.name == 'Siren Survivor' then
                                container.takeObject({
                                    guid = card.guid,
                                    position = {40.27, 1.10, 1.79},
                                    rotation = {0.00, 180.00, 0.00},
                                })
                            end
                        end
                    elseif container.getGMNotes() == 'Technologies' then
                        for _, card in ipairs(container.getObjects()) do
                            if card.name == 'Trireme Weapons' then
                                container.takeObject({
                                    guid = card.guid,
                                    position = {35.45, 1.10, 64.73},
                                    rotation = {0.00, 180.00, 180.00},
                                })
                            elseif card.name == 'Trireme Armor' then
                                container.takeObject({
                                    guid = card.guid,
                                    position = {39.15, 1.10, 64.73},
                                    rotation = {0.00, 180.00, 180.00},
                                })
                            elseif card.name == 'Trireme Ranged Weapons' then
                                container.takeObject({
                                    guid = card.guid,
                                    position = {42.85, 1.10, 64.73},
                                    rotation = {0.00, 180.00, 180.00},
                                })
                            -- Project deck
                            elseif card.name == 'Rhetoric' or card.name == 'Titan Hunting' or card.name == 'Trading Solutions'
                                    or card.name == 'Arrow Barrage' or card.name == 'Siren Armor' then
                                container.takeObject({
                                    guid = card.guid,
                                    position = {28.28, 1.10, 64.78},
                                    rotation = {0.00, 180.00, 0.00},
                                })
                            end
                        end
                    elseif container.getGMNotes() == 'DoomCards' then
                        -- 1A + 2 doom
                        for _, card in ipairs(container.getObjects()) do
                            if card.name == 'Shape Of Things To Come' then
                                container.takeObject({
                                    guid = card.guid,
                                    position = {5.28, 1.10, 49.72},
                                    rotation = {0.00, 180.00, 0.00},
                                    callback_function = function(spawnedObject)
                                        getObjectFromGUID('df1c9e').takeObject({ position = {1.36, 1.18, 48.94} })
                                        getObjectFromGUID('df1c9e').takeObject({ position = {2.12, 2.37, 48.66} })
                                    end
                                })
                            end
                        end
                    elseif container.getGMNotes() == 'StoryCards' then
                        -- Inward odyssey + 1 progress
                        for _, card in ipairs(container.getObjects()) do
                            if card.name == 'Inward Odyssey' then
                                container.takeObject({
                                    guid = card.guid,
                                    position = {-5.81, 1.00, 41.96},
                                    rotation = {0.00, 180.00, 0.00},
                                    callback_function = function(spawnedObject)
                                        getObjectFromGUID('2dca67').takeObject({ position = {-2.14, 1.18, 39.41} })
                                    end
                                })
                            end
                        end
                    elseif container.getGMNotes() == 'GearDeck' then
                        local foundCards = {}
                        for _, card in ipairs(container.getObjects()) do
                            if card.name == 'Sail Spolas' and not foundCards['Sail Spolas'] then
                                container.takeObject({
                                    guid = card.guid,
                                    position = {39.73, 1.10, -5.11},
                                    rotation = {0.00, 180.00, 0.00},
                                })
                                foundCards['Sail Spolas'] = true
                            elseif card.name == 'Boatmace' and not foundCards['Boatmace'] then
                                container.takeObject({
                                    guid = card.guid,
                                    position = {42.30, 1.10, -5.11},
                                    rotation = {0.00, 180.00, 0.00},
                                })
                                foundCards['Boatmace'] = true
                            elseif card.name == 'Kratos Kopis' and not foundCards['Kratos Kopis'] then
                                container.takeObject({
                                    guid = card.guid,
                                    position = {44.87, 1.10, -5.11},
                                    rotation = {0.00, 180.00, 0.00},
                                })
                                foundCards['Kratos Kopis'] = true
                            elseif card.name == 'Siren Panoply Armor' and not foundCards['Siren Panoply Armor'] then
                                container.takeObject({
                                    guid = card.guid,
                                    position = {39.73, 1.10, -9.10},
                                    rotation = {0.00, 180.00, 0.00},
                                })
                                foundCards['Siren Panoply Armor'] = true
                            elseif card.name == 'Sirenteeth' and not foundCards['Sirenteeth'] then
                                container.takeObject({
                                    guid = card.guid,
                                    position = {42.30, 1.10, -9.10},
                                    rotation = {0.00, 180.00, 0.00},
                                })
                                foundCards['Sirenteeth'] = true
                            elseif card.name == 'Shipwrecker Shield' and not foundCards['Shipwrecker Shield'] then
                                container.takeObject({
                                    guid = card.guid,
                                    position = {44.87, 1.10, -9.10},
                                    rotation = {0.00, 180.00, 0.00},
                                })
                                foundCards['Shipwrecker Shield'] = true
                            end
                        end
                    end
                end

                Player.getPlayers()[1].pingTable({42.30, 1.01, -1.90})
                broadcastToAll('Don\'t forget to assign 1 Mnenos node to Imprisonment.', Constants.WARNING_COLOR)
                broadcastToAll('Follow the "Skipping the Tutorial" instructions.', Constants.WARNING_COLOR)
                if Options.cycle_count > 1 then
                    broadcastToAll('Follow the "Unfathomable Aeons" instructions.', Constants.WARNING_COLOR)
                end
            end
        end, 0.1)
    end, function()
        return not Ui.isUiLoading()
    end, 60, function()
        broadcastToAll('Could not set tutorial skip information, alter the Argo sheet and Timeline manually.', Color.Red)
    end)
end

function Cycle.reset()
    -- Destroy everything that is not persistent
    for _, object in ipairs(getObjects()) do
        if not object.hasTag(Constants.PERSISTENT) then
            object.destruct()
        end
    end

    Battle.cleanupCurrentBattle()
end

function Cycle.missingContent()
    broadcastToAll('Some of the content is missing or has been deleted. Please load a new blank save.', Color.Red)
end

function Cycle.save()
    local flatData = {
        
    }

    return flatData
end

------------------------------------------------------

return {
    init = Cycle.init,
    save = Cycle.save,
    setupCycle = Cycle.setupCycle,

    CYCLES = Cycle.CYCLES,
}