local Log = {}
Log.__index = Log

local Constants = require('Constants')
local Utils = require('Utils')

------------------------------------------------------

Log.logsByModule = {}
Log.levelByModule = {
    ['Global'] = Constants.DEBUG,
    ['Argo'] = Constants.DEBUG,
    ['Argonaut'] = Constants.DEBUG,
    ['Battle'] = Constants.DEBUG,
    ['BattleBoard'] = Constants.DEBUG,
    ['Cycle'] = Constants.DEBUG,
    ['Map'] = Constants.DEBUG,
    -- ['SearchStation'] = Constants.DEBUG,
    ['Terrain'] = Constants.DEBUG,
    ['Timeline'] = Constants.DEBUG,
    ['Titan'] = Constants.DEBUG,
    ['Triskelion'] = Constants.DEBUG,
}

function Log.init()
    Log.logsByModule = {}

    logStyle('debug', { r = 1.0, g = 1.0, b = 1.0 }, '', '')
    logStyle('info', { r = 0.0, g = 1.0, b = 1.0 }, '', '')
    logStyle('error', { r = 1.0, g = 0.0, b = 0.0 }, '', '')
end

function Log.create(module, level)
    local log = {
        module = module,
        level = level
    }
    setmetatable(log, Log)

    return log
end

function Log:error(message, ...)
    message = message or ''

    if self.level <= Constants.ERROR then
        log(Utils.format('[%s] ' .. message, self.module, ...), nil, 'error')
    end
end

function Log:info(message, ...)
    message = message or ''
    
    if self.level <= Constants.INFO then
        log(Utils.format('[%s] ' .. message, self.module, ...), nil, 'info')
    end
end

function Log:debug(message, ...)
    message = message or ''

    if self.level <= Constants.DEBUG then
        log(Utils.format('[%s] ' .. message, self.module, ...), nil, 'debug')
    end
end

function Log.ForModule(module)
    local log = Log.logsByModule[module]
    if not log then
        log = Log.create(module, Log.levelByModule[module] or Constants.ERROR)
        Log.logsByModule[module] = log
    end
    return log
end

return {
    init = Log.init,
    ForModule = Log.ForModule
}