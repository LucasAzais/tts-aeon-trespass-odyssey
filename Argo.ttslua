local Argo = {}
Argo.__index = Argo

-- Used for dynamic loading of the Battle class
local Battle
local Constants = require('Constants')
local EventManager = require('EventManager')
local GlobalUi = require('GlobalUi')
local Log = require('Log').ForModule('Argo')
local Ui = require('Ui')
local Utils = require('Utils')

------------------------------------------------------

Argo.CUSTOM_ASSETS = {
    {
        name = 'checked',
        url = 'http://cloud-3.steamusercontent.com/ugc/2057628267251746049/3647F426FC0701F65CD80005CF410D4C1B7C0BFF/',
    }
}

Argo.SHEET_POSITION = {-24.00, 15.27, 85.95}
Argo.SHEET_ROTATION = {60.45, 180.00, 0.00}
Argo.SHEET_SCALE = {16.46, 1.00, 16.46}
Argo.SHEET_URL = {
    [Constants.CYCLE_I] = 'http://cloud-3.steamusercontent.com/ugc/2064383278577606165/AFFB9737557EC154FAA960A8AC24101B05D39A1A/',
    [Constants.CYCLE_II] = 'http://cloud-3.steamusercontent.com/ugc/2049748969031541282/34A9A01AE8E4F08A2B52D821EAE2F1DD65CEFE93/',
    [Constants.CYCLE_III] = 'http://cloud-3.steamusercontent.com/ugc/2049748969031541382/9750DBCB4D3FF554F95918DC4AB815B80C5B7594/',
}

Argo.EVOLUTION_INDEX_TO_LEVEL = {
    [Constants.CYCLE_I] = {
        [1] = Constants.LEVEL_0,
        [2] = Constants.LEVEL_1,
        [3] = Constants.LEVEL_1,
        [4] = Constants.LEVEL_2,
        [5] = Constants.LEVEL_2,
        [6] = Constants.LEVEL_2,
        [7] = Constants.LEVEL_3,
        [8] = Constants.LEVEL_4,
        [9] = Constants.LEVEL_4,
        [10] = Constants.LEVEL_4,
    },
    [Constants.CYCLE_II] = {
        [1] = Constants.LEVEL_1,
        [2] = Constants.LEVEL_1,
        [3] = Constants.LEVEL_2,
        [4] = Constants.LEVEL_2,
        [5] = Constants.LEVEL_3,
        [6] = Constants.LEVEL_3,
        [7] = Constants.LEVEL_4,
        [8] = Constants.LEVEL_4,
        [9] = Constants.LEVEL_4,
    },
    [Constants.CYCLE_III] = {
        [1] = Constants.LEVEL_1,
        [2] = Constants.LEVEL_1,
        [3] = Constants.LEVEL_2,
        [4] = Constants.LEVEL_2,
        [5] = Constants.LEVEL_3,
        [6] = Constants.LEVEL_3,
        [7] = Constants.LEVEL_4,
        [8] = Constants.LEVEL_4,
        [9] = Constants.LEVEL_4,
        [10] = Constants.LEVEL_5,
    },
}

-- TODO: Replace all names with proper strings
function Argo.init(savedData)
    Battle = Battle or require('Battle')

    Argo.DATA = {}
    for cycle, _ in pairs(savedData) do
        Argo.DATA[cycle] = Argo.create(savedData[cycle])
    end
end

function Argo.getData(cycle)
    return Argo.DATA[cycle]
end

function Argo.spawnSheet(params)
    if not params or not params.cycle then return end

    local argoSheet = spawnObject({
        type = 'Custom_Tile',
        sound = false,
        position = Argo.SHEET_POSITION,
        rotation = Argo.SHEET_ROTATION,
        scale = Argo.SHEET_SCALE,
        callback_function = function(spawnedObject)
            spawnedObject.setLock(true)
            spawnedObject.addTag(Constants.ARGO_SHEET)
            spawnedObject.addTag('Cycle' .. params.cycle)
            spawnedObject.setName('Cycle ' .. params.cycle)
        end
    })

    argoSheet.setCustomObject({
        image = Argo.SHEET_URL[params.cycle],
        type = 0,
        thickness = 0.1,
    })

    params.sheetGUID = argoSheet.getGUID()
    if Argo.DATA[params.cycle] then
        broadcastToAll('The argo content for cycle ' .. params.cycle .. ' has been overwritten with a new sheet.\n Reload your save if this was an accident.', Color.Red)
    end
    Argo.DATA[params.cycle] = Argo.create(params)

    return Argo.DATA[params.cycle], argoSheet
end

function Argo.create(params)
    if not params or not params.cycle then return end
    
    local argo = { 
        cycle = params.cycle,
    }
    setmetatable(argo, Argo)

    argo.hull = params.hull or 0
    argo.hull_unlocked = params.hull_unlocked or false
    argo.crew = params.crew or 0
    argo.crew_unlocked = params.crew_unlocked or false

    if argo.cycle == Constants.CYCLE_II then
        argo.passengers = params.passengers or nil
        if not argo.passengers then
            argo.passengers = {}
            -- This will be a list with strings for keys to able to lookup the values quickly
            for i = 9, 1, -1 do
                argo.passengers[tostring(i)] = ''
            end
        end
    end

    if argo.cycle == Constants.CYCLE_I then
        argo.strangers = params.strangers or 0
    elseif argo.cycle == Constants.CYCLE_II then
        argo.humanity = params.humanity or 0
        argo.defectors = params.defectors or 0
        argo.defectors_unlocked = params.defectors_unlocked or false
    elseif argo.cycle == Constants.CYCLE_III then
        argo.loop_length = params.loop_length or 0
        argo.frozen_time = params.frozen_time or 0
        argo.frozen_time_unlocked = params.frozen_time_unlocked or false
        argo.paradox = params.paradox or 0
    end

    argo.story_card = params.story_card or nil
    argo.doom_card = params.doom_card or ''
    argo.map_tile = params.map_tile or ''
    argo.argo_fate = params.argo_fate or 0
    argo.argo_knowledge = params.argo_knowledge or 0

    argo.abilities_limit = params.abilities_limit or 0
    argo.current_titans = params.current_titans or 0
    argo.max_titans = params.max_titans or 0
    argo.titans_list1 = params.titans_list1
    if not argo.titans_list1 then
        argo.titans_list1 = {}
        local lineCount = 10
        if argo.cycle == Constants.CYCLE_II then lineCount = 9
        elseif argo.cycle == Constants.CYCLE_III then lineCount = 8 end

        for i = 1, lineCount do
            table.insert(argo.titans_list1, '')
        end
    end

    argo.titans_list2 = params.titans_list2
    if not argo.titans_list2 then
        argo.titans_list2 = {}
        local lineCount = 10
        if argo.cycle == Constants.CYCLE_II then lineCount = 9
        elseif argo.cycle == Constants.CYCLE_III then lineCount = 8 end

        for i = 1, lineCount do
            table.insert(argo.titans_list2, '')
        end
    end

    argo.adventure_tracks = params.adventure_tracks 
    if not argo.adventure_tracks then
        if argo.cycle == Constants.CYCLE_I then
            argo.adventure_tracks = {
                [Constants.FATED_CONUNDRUM] = {false, 0, 0, 0, false},
                [Constants.PLIGHT_OF_THE_PEOPLE] = {false, 0, 0, 0, false},
                [Constants.HIDDEN_IN_PLAIN_SIGHT] = {false, 0, 0, 0, false},
                [Constants.MAN_OF_PURPOSE] = {false, 0, 0, 0, false},
                [Constants.UNEASY_RESTS_THE_HEAD] = {false, 0, 0, false},
                [Constants.TEARS_OF_A_MINOTAUR] = {false, 0, 0, false},
                [Constants.DREAMS_LAID_BARE] = {false, 0, 0, 0, false},
                [Constants.TUTORIAL] = {false, 0, false},
            }
        elseif argo.cycle == Constants.CYCLE_II then
            argo.adventure_tracks = {
                [Constants.CONSIDER_THE_ANT] = {false, 0, 0, false},
                [Constants.THE_OTHER_THERMOPYLAE] = {false, 0, 0, false},
                [Constants.FROM_THE_ASHES] = {false, 0, 0, false},
                [Constants.INTENDED_PURPOSE] = {false, 0, 0, false},
                [Constants.MISERY_INDUSTRY] = {false, 0, 0, false},
                [Constants.PARABLE_OF_THE_BUTTERFLY] = {false, 0, 0, false},
                [Constants.TRUTH_TO_WEAKNESS] = {false, 0, 0, false},
                [Constants.WHEN_THE_LAND_MEETS_THE_SEA] = {false, 0, 0, false},
            }
        elseif argo.cycle == Constants.CYCLE_III then
            argo.adventure_tracks = {
                [Constants.ROAD_LESS_TRAVELED] = {false, 0, 0, 0, false},
                [Constants.CHILDREN_OF_THE_SUN] = {false, 0, 0, 0, false},
                [Constants.WHAT_WE_LEFT_BEHIND] = {false, 0, 0, 0, false},
                [Constants.OF_WAX_AND_PROMISES] = {false, 0, 0, false},
                [Constants.CANT_GO_BACK] = {false, 0, 0, false},
                [Constants.SIN_OF_THE_FATHERS] = {false, 0, 0, false},
                [Constants.COMING_OF_AGE] = {false, 0, 0, 0, false},
            }
        end
    end

    argo.diplomacy_tracks = params.diplomacy_tracks
    if not argo.diplomacy_tracks then
        if argo.cycle == Constants.CYCLE_I then
            argo.diplomacy_tracks = {
                [Constants.MINOANS] = 0,
                [Constants.LABYRINTHIANS] = 0,
                [Constants.HORNSWORN] = 0,
            }
        elseif argo.cycle == Constants.CYCLE_II then
            argo.diplomacy_tracks = {
                [Constants.HELOTS] = 0,
                [Constants.CYCLOPES] = 0,
                [Constants.SYMMACHY] = 0,
            }
        elseif argo.cycle == Constants.CYCLE_III then
            argo.diplomacy_tracks = {
                [Constants.SUNHEIRS] = 0,
                [Constants.DELPHIANS] = 0,
                [Constants.TWILIGHT_WATCH] = 0,
            }
        end
    end

    argo.godforms = params.godforms or {}
    argo.summons = params.summons or {}
    argo.summons_limit = params.summons_limit or 0

    argo.evolution_track = params.evolution_track
    if not argo.evolution_track then
        if argo.cycle == Constants.CYCLE_I then
            argo.evolution_track = {
                [1] = { [Constants.HEKATON] = false, },
                [2] = { [Constants.HEKATON] = false, [Constants.LABYRINTHAUROS] = false },
                [3] = { [Constants.MIXED] = false },
                [4] = { [Constants.HEKATON] = false, [Constants.LABYRINTHAUROS] = false },
                [5] = { [Constants.MIXED] = false },
                [6] = { [Constants.MIXED] = false },
                [7] = { [Constants.HEKATON] = false, [Constants.LABYRINTHAUROS] = false },
                [8] = { [Constants.HEKATON] = false, [Constants.LABYRINTHAUROS] = false },
                [9] = { [Constants.HEKATON] = false, [Constants.LABYRINTHAUROS] = false },
                [10] = { [Constants.MIXED] = false },
            }
        elseif argo.cycle == Constants.CYCLE_II then
            argo.evolution_track = {
                [1] = { [Constants.CYCLONUS] = false, [Constants.CHIMERA_METASTASIOS] = false, },
                [2] = { [Constants.MIXED] = false },
                [3] = { [Constants.CYCLONUS] = false, [Constants.CHIMERA_METASTASIOS] = false, },
                [4] = { [Constants.MIXED] = false },
                [5] = { [Constants.MIXED] = false },
                [6] = { [Constants.CYCLONUS] = false, [Constants.CHIMERA_METASTASIOS] = false, },
                [7] = { [Constants.CYCLONUS] = false, [Constants.CHIMERA_METASTASIOS] = false, },
                [8] = { [Constants.CYCLONUS] = false, [Constants.CHIMERA_METASTASIOS] = false, },
                [9] = { [Constants.MIXED] = false },
            }
        elseif argo.cycle == Constants.CYCLE_III then
            argo.evolution_track = {
                [1] = { [Constants.HYPERTIME_ORACLE] = false, [Constants.ICARIAN_HARPY] = false, },
                [2] = { [Constants.MIXED] = false },
                [3] = { [Constants.HYPERTIME_ORACLE] = false, [Constants.ICARIAN_HARPY] = false, },
                [4] = { [Constants.MIXED] = false },
                [5] = { [Constants.MIXED] = false },
                [6] = { [Constants.HYPERTIME_ORACLE] = false, [Constants.ICARIAN_HARPY] = false, },
                [7] = { [Constants.HYPERTIME_ORACLE] = false, [Constants.ICARIAN_HARPY] = false, },
                [8] = { [Constants.HYPERTIME_ORACLE] = false, [Constants.ICARIAN_HARPY] = false, },
                [9] = { [Constants.HYPERTIME_ORACLE] = false, [Constants.ICARIAN_HARPY] = false, },
                [10] = { [Constants.MIXED] = false },
            }
        end
    end

    argo.boss_track = params.boss_track or 0
    if argo.cycle == Constants.CYCLE_III then
        argo.boss_level2 = params.boss_level2 or false
    end
    argo.adversary_name = params.adversary_name or ''
    argo.adversary_track = params.adversary_track or 0
    argo.adversary_unlocked = params.adversary_unlocked or false

    -- Cycle I resources
    argo.resources = params.resources or nil
    if not argo.resources then
        argo.resources = {}
        if argo.cycle == Constants.CYCLE_I then
            argo.resources.trireme = params.trireme or 0
            argo.resources.trireme_note = params.trireme_note or {'', ''}
            argo.resources.monument = params.monument or 0
            argo.resources.monument_note = params.monument_note or {'', ''}
            argo.resources.armament = params.armament or 0
            argo.resources.armament_note = params.armament_note or {'', ''}

            argo.resources.muscle_cluster = params.muscle_cluster or 0
            argo.resources.muscle_cluster_note = params.muscle_cluster_note or {'', ''}
            argo.resources.calcified_knucle_bone = params.calcified_knucle_bone or 0
            argo.resources.calcified_knucle_bone_note = params.calcified_knucle_bone_note or {'', ''}
            argo.resources.infused_mechanism = params.infused_mechanism or 0
            argo.resources.infused_mechanism_note = params.infused_mechanism_note or {'', ''}
            argo.resources.fleshy_mantle = params.fleshy_mantle or 0
            argo.resources.fleshy_mantle_note = params.fleshy_mantle_note or {'', ''}
            argo.resources.fear_essence = params.fear_essence or 0
            argo.resources.fear_essence_note = params.fear_essence_note or {'', ''}
            argo.resources.maze_fragment = params.maze_fragment or 0
            argo.resources.maze_fragment_note = params.maze_fragment_note or {'', ''}
            argo.resources.grotesque_beak = params.grotesque_beak or 0
            argo.resources.grotesque_beak_note = params.grotesque_beak_note or {'', ''}
            argo.resources.powdered_matter = params.powdered_matter or 0
            argo.resources.powdered_matter_note = params.powdered_matter_note or {'', ''}
            argo.resources.raw_ambrosia = params.raw_ambrosia or 0
            argo.resources.raw_ambrosia_note = params.raw_ambrosia_note or {'', ''}
            argo.resources.cores_note = params.cores_note or {'', ''}

            argo.resources.priests = params.priests or 0
            argo.resources.priests_note = params.priests_note or {'', ''}
            argo.resources.sisyphus_tears = params.sisyphus_tears or 0
            argo.resources.sisyphus_tears_note = params.sisyphus_tears_note or {'', ''}
            argo.resources.rare_resources_note = params.rare_resources_note or {'', ''}
        -- Cycle II resources
        elseif argo.cycle == Constants.CYCLE_II then
            argo.resources.war_trireme = params.war_trireme or 0
            argo.resources.war_trireme_note = params.war_trireme_note or {'', ''}
            argo.resources.relief = params.relief or 0
            argo.resources.relief_note = params.relief_note or {'', ''}
            argo.resources.war_machine = params.war_machine or 0
            argo.resources.war_machine_note = params.war_machine_note or {'', ''}

            argo.resources.fear_essence = params.fear_essence or 0
            argo.resources.fear_essence_note = params.fear_essence_note or {'', ''}
            argo.resources.maze_fragment = params.maze_fragment or 0
            argo.resources.maze_fragment_note = params.maze_fragment_note or {'', ''}
            argo.resources.cyclopean_metal = params.cyclopean_metal or 0
            argo.resources.cyclopean_metal_note = params.cyclopean_metal_note or {'', ''}
            argo.resources.black_chain = params.black_chain or 0
            argo.resources.black_chain_note = params.black_chain_note or {'', ''}
            argo.resources.chimeric_tar = params.chimeric_tar or 0
            argo.resources.chimeric_tar_note = params.chimeric_tar_note or {'', ''}
            argo.resources.supersolid_relief_mass = params.supersolid_relief_mass or 0
            argo.resources.supersolid_relief_mass_note = params.supersolid_relief_mass_note or {'', ''}
            argo.resources.living_abyss = params.living_abyss or 0
            argo.resources.living_abyss_note = params.living_abyss_note or {'', ''}
            argo.resources.skin_of_malice = params.skin_of_malice or 0
            argo.resources.skin_of_malice_note = params.skin_of_malice_note or {'', ''}
            argo.resources.grotesque_beak = params.grotesque_beak or 0
            argo.resources.grotesque_beak_note = params.grotesque_beak_note or {'', ''}
            argo.resources.powdered_matter = params.powdered_matter or 0
            argo.resources.powdered_matter_note = params.powdered_matter_note or {'', ''}
            argo.resources.retractable_mechanism = params.retractable_mechanism or 0
            argo.resources.retractable_mechanism_note = params.retractable_mechanism_note or {'', ''}
            argo.resources.reliefshell_fragment = params.reliefshell_fragment or 0
            argo.resources.reliefshell_fragment_note = params.reliefshell_fragment_note or {'', ''}
            argo.resources.violent_ambrosia = params.violent_ambrosia or 0
            argo.resources.violent_ambrosia_note = params.violent_ambrosia_note or {'', ''}
            argo.resources.cores_note = params.cores_note or {'', ''}

            argo.resources.priests = params.priests or 0
            argo.resources.priests_note = params.priests_note or {'', ''}
            argo.resources.sisyphus_tears = params.sisyphus_tears or 0
            argo.resources.sisyphus_tears_note = params.sisyphus_tears_note or {'', ''}
            argo.resources.pygmalion_stones = params.pygmalion_stones or 0
            argo.resources.pygmalion_stones_note = params.pygmalion_stones_note or {'', ''}
            argo.resources.rare_resources_note = params.rare_resources_note or {'', ''}
        -- Cycle III resources
        elseif argo.cycle == Constants.CYCLE_III then
            argo.resources.sirenshell = params.sirenshell or 0
            argo.resources.sirenshell_note = params.sirenshell_note or {'', ''}
            argo.resources.hyperborean_alloy = params.hyperborean_alloy or 0
            argo.resources.hyperborean_alloy_note = params.hyperborean_alloy_note or {'', ''}
            argo.resources.daedalus_makina = params.daedalus_makina or 0
            argo.resources.daedalus_makina_note = params.daedalus_makina_note or {'', ''}

            argo.resources.living_abyss = params.living_abyss or 0
            argo.resources.living_abyss_note = params.living_abyss_note or {'', ''}
            argo.resources.skin_of_malice = params.skin_of_malice or 0
            argo.resources.skin_of_malice_note = params.skin_of_malice_note or {'', ''}
            argo.resources.clothflesh = params.clothflesh or 0
            argo.resources.clothflesh_note = params.clothflesh_note or {'', ''}
            argo.resources.eyes_cluster = params.eyes_cluster or 0
            argo.resources.eyes_cluster_note = params.eyes_cluster_note or {'', ''}
            argo.resources.razorclaw = params.razorclaw or 0
            argo.resources.razorclaw_note = params.razorclaw_note or {'', ''}
            argo.resources.icarian_feather = params.icarian_feather or 0
            argo.resources.icarian_feather_note = params.icarian_feather_note or {'', ''}
            argo.resources.writhing_tentacle = params.writhing_tentacle or 0
            argo.resources.writhing_tentacle_note = params.writhing_tentacle_note or {'', ''}
            argo.resources.sunburned_skull = params.sunburned_skull or 0
            argo.resources.sunburned_skull_note = params.sunburned_skull_note or {'', ''}
            argo.resources.grotesque_beak = params.grotesque_beak or 0
            argo.resources.grotesque_beak_note = params.grotesque_beak_note or {'', ''}
            argo.resources.powdered_matter = params.powdered_matter or 0
            argo.resources.powdered_matter_note = params.powdered_matter_note or {'', ''}
            argo.resources.retractable_mechanism = params.retractable_mechanism or 0
            argo.resources.retractable_mechanism_note = params.retractable_mechanism_note or {'', ''}
            argo.resources.reliefshell_fragment = params.reliefshell_fragment or 0
            argo.resources.reliefshell_fragment_note = params.reliefshell_fragment_note or {'', ''}
            argo.resources.frozen_ambrosia = params.frozen_ambrosia or 0
            argo.resources.frozen_ambrosia_note = params.frozen_ambrosia_note or {'', ''}
            argo.resources.cores_note = params.cores_note or {'', ''}
            argo.resources.rare_resources_note = params.rare_resources_note or {'', ''}

            argo.resources.priests = params.priests or 0
            argo.resources.priests_note = params.priests_note or {'', ''}
            argo.resources.echoes_of_recollection = params.echoes_of_recollection or 0
            argo.resources.echoes_of_recollection_note = params.echoes_of_recollection_note or {'', ''}
            argo.resources.sisyphus_tears = params.sisyphus_tears or 0
            argo.resources.sisyphus_tears_note = params.sisyphus_tears_note or {'', ''}
            argo.resources.pygmalion_stones = params.pygmalion_stones or 0
            argo.resources.pygmalion_stones_note = params.pygmalion_stones_note or {'', ''}
        end
    end

    local sheet = nil
    if params.sheetGUID then
        sheet = getObjectFromGUID(params.sheetGUID) 
        argo.sheetGUID = params.sheetGUID
    else
        sheet = getObjectsWithAllTags({Constants.ARGO_SHEET, 'Cycle'..argo.cycle})[1]
        if sheet then argo.sheetGUID = sheet.getGUID() end
    end

    if not sheet then
        Log:error('Could not find argo sheet with tags %s and %s', Constants.ARGO_SHEET, 'Cycle' .. argo.cycle)
        broadcastToAll('Could not find argo sheet. Create one with tags ' .. Constants.ARGO_SHEET .. ' and Cycle' .. argo.cycle 
                .. ' then save and reload.', Color.Red)
        return nil
    else
        argo:createSheetUi(true)
    end

    return argo
end

function Argo:createSheetUi(refresh)
    if not self.cycle then return end
    if not self.sheetGUID then return end

    local sheet = getObjectFromGUID(self.sheetGUID)

    self.ui = {}
    self.ui.root = Ui.createRootOnObject('argo-sheet-root', sheet, 1.2)
    self.ui.root:wipe()

    sheet.UI.setCustomAssets(Constants.CUSTOM_ASSETS)

    if self.cycle == Constants.CYCLE_I then
        self:createSheetUiForCycleI()
    elseif self.cycle == Constants.CYCLE_II then
        self:createSheetUiForCycleII()
    elseif self.cycle == Constants.CYCLE_III then
        self:createSheetUiForCycleIII()
    end

    if refresh then
        self.ui.root:refresh()
    end
end

function Argo:createSheetUiForCycleI()
    self.ui.main_panel = self.ui.root:panel({ id = 'global-panel', width = 4000, height = 3000 })
    -- panel.attributes.color = 'Green'
    
    ------------------------
    -- Top left section
    self.ui.story_card_input = self.ui.main_panel:input({ id = 'story-card-input', width = 150, height = 60, x = -1110, y = 547, 
                        fontSize = 50, placeholder = ' ', text = self.story_card, colors = Ui.TRANSPARENT_INPUT_COLORS,
                        textAlignment = 'MiddleCenter', onValueChanged = function(_, value)
                            self:setStoryCard(value)
                        end })
    self.ui.doom_card_input = self.ui.main_panel:input({ id = 'doom-card-input', width = 150, height = 60, x = -820, y = 547,
                        fontSize = 50, placeholder = ' ', text = self.doom_card, colors = Ui.TRANSPARENT_INPUT_COLORS,
                        textAlignment = 'MiddleCenter', onValueChanged = function(_, value) 
                            self:setDoomCard(value)
                        end })
    self.ui.map_tile_input = self.ui.main_panel:input({ id = 'map-tile-input', width = 150, height = 60, x = -530, y = 547,
                        fontSize = 50, placeholder = ' ', text = self.map_tile, colors = Ui.TRANSPARENT_INPUT_COLORS,
                        textAlignment = 'MiddleCenter', onValueChanged = function(_, value) 
                            self:setMapTile(value)
                        end })

    ------------------------
    -- Argo fate section
    self.ui.argo_fate_button = self.ui.main_panel:button({ id = 'argo-fate-button', fontSize = 40, 
                        width = 55, height = 54, x = -295, y = 733,
                        colors = Ui.TRANSPARENT_INPUT_COLORS, textAlignment = 'MiddleCenter',
                        text = tostring(self.argo_fate), onClick = function(_, button)

        self.argo_fate = self.argo_fate + (button == '-2' and -1 or 1)
        self.argo_fate = Utils.clamp(self.argo_fate, 0, 10)
        self.ui.argo_fate_button:setText(self.argo_fate)
        Log:debug('Argo fate set to %s', self.argo_fate)

        if self.argo_fate >= 10 then
            broadcastToAll('Read 0981 immediately.', Constants.WARNING_COLOR)
        end
    end })

    self.ui.argo_knowledge_button = self.ui.main_panel:button({ id = 'argo-knowledge-button', fontSize = 40, 
                        width = 80, height = 50, x = -120, y = 632,
                        colors = Ui.TRANSPARENT_INPUT_COLORS, textAlignment = 'MiddleCenter',
                        text = tostring(self.argo_knowledge), onClick = function(_, button)
        
        self.argo_knowledge = self.argo_knowledge + (button == '-2' and -1 or 1)
        self.argo_knowledge = Utils.clamp(self.argo_knowledge, 0, nil)
        self.ui.argo_knowledge_button:setText(self.argo_knowledge)
        Log:debug('Argo knowledge set to %s', self.argo_knowledge)
    end })

    self.ui.strangers_button = self.ui.main_panel:button({ id = 'strangers-button', fontSize = 40, 
                        width = 80, height = 50, x = -120, y = 543,
                        colors = Ui.TRANSPARENT_INPUT_COLORS, textAlignment = 'MiddleCenter',
                        text = tostring(self.strangers), onClick = function(_, button)
        
        self.strangers = self.strangers + (button == '-2' and -1 or 1)
        self.strangers = Utils.clamp(self.strangers, 0, nil)
        self.ui.strangers_button:setText(self.strangers)
        Log:debug('Strangers set to %s', self.strangers)
    end })

    ------------------------
    -- Hull/Crew
    self.ui.hull_group = self.ui.main_panel:checkboxGroup({ id = 'hull-group', onClick = function(checkbox)
        self:setHull(checkbox.checkboxValue)
    end })

    local maxCheckboxes = 5
    for i = maxCheckboxes, 0, -1 do
        self.ui['hull_'..i..'_checkbox'] = self.ui.hull_group:checkbox({ id = 'hull-'..i..'-checkbox', 
                            width = 100, height = 100, x = -998 + (maxCheckboxes-i) * 82.5, y = 387.5,
                            checked = (self.hull == i) }, true)
        self.ui['hull_'..i..'_checkbox'].checkboxValue = i
    end

    self.ui.crew_group = self.ui.main_panel:checkboxGroup({ id = 'crew-group', onClick = function(checkbox)
        self:setCrew(checkbox.checkboxValue)
    end })

    local maxCheckboxes = 6
    for i = maxCheckboxes, 0, -1 do
        self.ui['crew_'..i..'_checkbox'] = self.ui.crew_group:checkbox({ id = 'crew-'..i..'-checkbox', 
                            width = 100, height = 100, x = -998 + (maxCheckboxes-i) * 82.5, y = 295,
                            checked = (self.crew == i) }, true)
        self.ui['crew_'..i..'_checkbox'].checkboxValue = i
    end

    ------------------------
    -- Titans
    self.ui.abilities_limit_input = self.ui.main_panel:input({ id = 'abilities-limit-input', width = 95, height = 45, x = -92.5, y = 274, 
                        fontSize = 45, placeholder = ' ', text = tostring(self.abilities_limit), colors = Ui.TRANSPARENT_INPUT_COLORS,
                        textAlignment = 'MiddleCenter', characterValidation = 'Integer', onValueChanged = function(_, value) 
                            self:setAbilitiesLimit(value)
                        end })
    self.ui.current_titans_input = self.ui.main_panel:input({ id = 'current-titans-input', width = 60, height = 45, x = -115, y = 213,
                        fontSize = 35, placeholder = ' ', text = tostring(self.current_titans or ''), colors = Ui.TRANSPARENT_INPUT_COLORS,
                        textAlignment = 'MiddleCenter', characterValidation = 'Integer', onValueChanged = function(_, value) 
                            self:setCurrentTitans(value)
                        end })
    self.ui.max_titans_input = self.ui.main_panel:input({ id = 'max-titans-input', width = 60, height = 45, x = -70, y = 213,
                        fontSize = 35, placeholder = ' ', text = tostring(self.max_titans or ''), colors = Ui.TRANSPARENT_INPUT_COLORS,
                        textAlignment = 'MiddleCenter', characterValidation = 'Integer', onValueChanged = function(_, value) 
                            self:setTitansLimit(value)
                        end })

    for index, text in ipairs(self.titans_list1) do
        self.ui['titans_input1_line' .. index] = self.ui.main_panel:input({ id = 'titans-list1-input-' .. index, fontSize = 30, 
                                colors = Ui.TRANSPARENT_INPUT_COLORS, width = 585, height = 40, x = -957, y = 170 + (index-1)*-33.9 ,
                                text = text, placeholder = ' ', onValueChanged = function(_, value)
                                    self:setTitansList1(index, value)
                                end })
    end

    for index, text in ipairs(self.titans_list2) do
        self.ui['titans_input2_line' .. index] = self.ui.main_panel:input({ id = 'titans-list2-input-' .. index, fontSize = 30, 
                                colors = Ui.TRANSPARENT_INPUT_COLORS, width = 585, height = 40, x = -348, y = 170 + (index-1)*-33.9 ,
                                text = text, placeholder = ' ', onValueChanged = function(_, value)
                                    self:setTitansList2(index, value)
                                end })
    end

    ------------------------
    -- Adventure tracks
    local xStart, yStart = -1075, -322
    local xStep = 50
    local xOffset, yOffset = 422, -123
    -- Named array for ordering purposes
    local ordering = {
        Constants.FATED_CONUNDRUM, Constants.PLIGHT_OF_THE_PEOPLE, Constants.HIDDEN_IN_PLAIN_SIGHT,
        Constants.MAN_OF_PURPOSE, Constants.UNEASY_RESTS_THE_HEAD, Constants.TEARS_OF_A_MINOTAUR,
        Constants.DREAMS_LAID_BARE, Constants.TUTORIAL
    }

    for adventureIndex, adventureName in ipairs(ordering) do
        local adventure = self.adventure_tracks[adventureName]

        for index, value in ipairs(adventure) do
            -- Calculate it, in cycle 1 it's 3 columns and 3 rows
            local x = xStart + (index - math.ceil(#adventure / 2) - ((#adventure % 2) == 0 and 0.5 or 0)) * xStep + xOffset * ((adventureIndex - 1) % 3)
            local y = yStart + yOffset * math.floor((adventureIndex - 1)/3)

            if value == true or value == false then
                self.ui[adventureName .. '_track_input_' .. index] = self.ui.main_panel:checkbox({ 
                            id = adventureName .. '-track-input-' .. index, 
                            width = 65, height = 65, x = x, y = y,
                            checked = value, onClick = function(_, button)
                                self:setAdventureTrack(adventureName, index, not adventure[index])
                            end })
            else
                self.ui[adventureName .. '_track_input_' .. index] = self.ui.main_panel:input({
                            id = adventureName .. '-track-input-' .. index, colors = Ui.TRANSPARENT_INPUT_COLORS,
                            text = ((tonumber(adventure[index]) or 0) > 0 and tostring(adventure[index])) or '',
                            width = 58, height = 50, x = x, y = y, textAlignment = 'MiddleCenter',
                            characterLimit = 2, characterValidation = 'Integer', fontSize = 35, placeholder = ' ', onValueChanged = function(_, newValue) 
                                self:setAdventureTrack(adventureName, index, newValue)
                            end})
            end
        end
    end
    
    ------------------------
    -- Diplomacy tracks
    local cycleTracks = self.diplomacy_tracks
    for index, factionName in ipairs({ Constants.MINOANS, Constants.LABYRINTHIANS, Constants.HORNSWORN }) do
        self.ui[factionName .. '_checkbox_group'] = self.ui.main_panel:checkboxGroup({ id = factionName .. '-checkbox-group', onClick = function(checkbox)
            checkbox:select()
            cycleTracks[factionName] = checkbox.checkboxValue
            Log:debug(factionName .. ' diplomacy set to %s', cycleTracks[factionName])
        end })

        for i = -10, 10 do
            local jump = 0
            if i >= -9 then jump = jump + 40 end
            if i >= -4 then jump = jump + 18 end
            if i >= 0 then jump = jump + 22 end
            if i >= 4 then jump = jump + 22 end
            if i >= 8 then jump = jump + 16 end

            self.ui[factionName .. '_'..i..'_checkbox'] = self.ui[factionName .. '_checkbox_group']:checkbox({ id = factionName .. '-'..i..'-checkbox', 
                                width = 50, height = 50, x = -1008 + jump + (10 + i) * 41, y = -767 + (index - 1) * -49,
                                checked = (cycleTracks[factionName] == i) }, true)
            self.ui[factionName .. '_'..i..'_checkbox'].checkboxValue = i
        end
    end
    
    ------------------------
    -- Godforms
    -- If checkbox checked -> set to true
    -- If text entered -> set to the text
    -- Otherwise set it to nil
    local xStart = 76
    for index = 1, 6 do
        self.ui['godform_'..index..'_checkbox'] = self.ui.main_panel:checkbox({ id = 'godform-' .. index .. '-checkbox',
                            checked = (self.godforms[index] ~= nil), width = 65, height = 65,
                            x = xStart, y = 750 + (index-1) * -55, onClick = function(_, button)
                                if self.godforms[index] == nil then
                                    self.godforms[index] = true
                                    self.ui['godform_'..index..'_checkbox']:setChecked(true)
                                    Log:debug('Godform %s activated.', index)
                                else
                                    self.godforms[index] = nil
                                    self.ui['godform_'..index..'_checkbox']:setChecked(false)
                                    self.ui['godform_'..index..'_input']:setText('')
                                    Log:debug('Godform %s deactivated.', index)
                                end
                            end })

        self.ui['godform_'..index..'_input'] = self.ui.main_panel:input({ id = 'godform-' .. index .. '-input',
                            text = (self.godforms[index] == true and '') or self.godforms[index], width = 500, height = 50,
                            fontSize = 40, colors = Ui.TRANSPARENT_INPUT_COLORS, placeholder = ' ',
                            x = xStart + 290, y = 750 + 10 + (index-1) * -55, onValueChanged = function(_, newValue)
                                self.godforms[index] = newValue
                                Log:debug('Godform %s set to %s', index, newValue)

                                if self.godforms[index] == '' then
                                    self.godforms[index] = nil
                                    self.ui['godform_'..index..'_checkbox']:setChecked(false)
                                    Log:debug('Godform %s deactivated.', index)
                                elseif self.godforms[index] and self.godforms[index] ~= '' then
                                    self.ui['godform_'..index..'_checkbox']:setChecked(true)
                                    Log:debug('Godform %s activated.', index)
                                end
                            end })
    end

    ------------------------
    -- Summons
    -- If checkbox checked -> set to true
    -- If text entered -> set to the text
    -- Otherwise set it to nil
    self.ui.summons_limit_button = self.ui.main_panel:button({ id = 'summons-button', fontSize = 40, 
                        width = 55, height = 55, x = 1221, y = 805,
                        colors = Ui.TRANSPARENT_INPUT_COLORS, textAlignment = 'MiddleCenter',
                        text = tostring(self.summons_limit), onClick = function(_, button)
        
        self.summons_limit = self.summons_limit + (button == '-2' and -1 or 1)
        self.summons_limit = Utils.clamp(self.summons_limit, 0, nil)
        self.ui.summons_limit_button:setText(self.summons_limit)
        Log:debug('Summons limit set to %s', self.summons_limit)
    end })

    local xStart = 700
    for index = 1, 6 do
        self.ui['summon_'..index..'_checkbox'] = self.ui.main_panel:checkbox({ id = 'summon-' .. index .. '-checkbox',
                            checked = (self.summons[index] ~= nil), width = 65, height = 65,
                            x = xStart, y = 750 + (index-1) * -55, onClick = function(_, button)
                                if self.summons[index] == nil then
                                    self.summons[index] = true
                                    self.ui['summon_'..index..'_checkbox']:setChecked(true)
                                    Log:debug('Summon %s activated.', index)
                                else
                                    self.summons[index] = nil
                                    self.ui['summon_'..index..'_checkbox']:setChecked(false)
                                    self.ui['summon_'..index..'_input']:setText('')
                                    Log:debug('Summon %s deactivated.', index)
                                end
                            end })

        self.ui['summon_'..index..'_input'] = self.ui.main_panel:input({ id = 'summon-' .. index .. '-input',
                            text = self.summons[index], width = 500, height = 50,
                            fontSize = 40, colors = Ui.TRANSPARENT_INPUT_COLORS, placeholder = ' ',
                            x = xStart + 290, y = 750 + 10 + (index-1) * -55, onValueChanged = function(_, newValue)
                                self.summons[index] = newValue
                                Log:debug('Summon %s set to %s', index, newValue)

                                if self.summons[index] == '' then
                                    self.summons[index] = nil
                                    self.ui['summon_'..index..'_checkbox']:setChecked(false)
                                    Log:debug('Summon %s deactivated.', index)
                                elseif self.summons[index] and self.summons[index] ~= '' then
                                    self.ui['summon_'..index..'_checkbox']:setChecked(true)
                                    Log:debug('Summon %s activated.', index)
                                end
                            end })
    end

    ------------------------
    -- Evolution tracks
    local xStart, yStart = 665, 232
    for index, level in ipairs(self.evolution_track) do
        local x = xStart + (index - 1) * 47.5
        local y = yStart

        if level[Constants.MIXED] ~= nil then
            self.ui['evolution_' .. index .. '_' .. Constants.MIXED .. '_checkbox'] = 
                            self.ui.main_panel:checkbox({ id = 'evolution-' .. index .. '-' .. Constants.MIXED .. '-checkbox',
                                        checked = level[Constants.MIXED], width = 55, height = 55,
                                        x = x, y = y, onClick = function(_, button)
                                            level[Constants.MIXED] = not level[Constants.MIXED]
                                            self.ui['evolution_' .. index .. '_' .. Constants.MIXED .. '_checkbox']:setChecked(level[Constants.MIXED])
                                            Log:debug('Evolution track section %s set to %s.', index, tostring(level[Constants.MIXED]))

                                            if(level[Constants.MIXED]) then
                                                -- Find the correct level, up to the current evolution level
                                                local lastMarkedHekatonIndex, lastMarkedLabyrinthaurosIndex = 0, 0
    
                                                for jndex, element in ipairs(self:getEvolutionTrack()) do
                                                    if jndex >= index then break end

                                                    if element[Constants.HEKATON] == true then
                                                        lastMarkedHekatonIndex = jndex
                                                    end

                                                    if element[Constants.LABYRINTHAUROS] == true then
                                                        lastMarkedLabyrinthaurosIndex = jndex
                                                    end
                                                end

                                                local allowHekaton, allowLabyrinthauros = false, false
                                                if index == lastMarkedHekatonIndex + 1 then allowHekaton = true end
                                                if index == lastMarkedLabyrinthaurosIndex + 1 then allowLabyrinthauros = true end

                                                -- Let the player choose which Primordial to setup
                                                local confirmationText = 'Which primordial do you want to setup?'
                                                if not allowHekaton and not allowLabyrinthauros then confirmationText = 'You cannot fill this box' end

                                                GlobalUi.showConfirmationDialog(confirmationText, (allowHekaton and 'Hekaton') or false, (allowHekaton and function()
                                                    Battle.setupBattle('Hekaton Battle', self.EVOLUTION_INDEX_TO_LEVEL[self.cycle][index])
                                                end) or nil, (allowLabyrinthauros and 'Labyrinthauros') or false, (allowLabyrinthauros and function()
                                                    Battle.setupBattle('Labyrinthauros Battle', self.EVOLUTION_INDEX_TO_LEVEL[self.cycle][index])
                                                end) or nil)
                                            end
                                        end })
        else
            if level[Constants.HEKATON] ~= nil then
                y = yStart + 30
                self.ui['evolution_' .. index .. '_' .. Constants.HEKATON .. '_checkbox'] = 
                            self.ui.main_panel:checkbox({ id = 'evolution-' .. index .. '-' .. Constants.HEKATON .. '-checkbox',
                                        checked = level[Constants.HEKATON], width = 55, height = 55,
                                        x = x, y = y, onClick = function(_, button)
                                            level[Constants.HEKATON] = not level[Constants.HEKATON]
                                            self.ui['evolution_' .. index .. '_' .. Constants.HEKATON .. '_checkbox']:setChecked(level[Constants.HEKATON])
                                            Log:debug('Evolution track section %s-%s set to %s.', index, Constants.HEKATON, tostring(level[Constants.HEKATON]))

                                            if level[Constants.HEKATON] == true then
                                                if index == 1 then
                                                    GlobalUi.showConfirmationDialog('Do you want to setup Tutorial Battle - Level 0?', 'Yes', function()
                                                        Battle.setupBattle('Tutorial Battle', Constants.LEVEL_0)
                                                    end)
                                                else
                                                    GlobalUi.showConfirmationDialog('Do you want to setup Hekaton Battle - Level ' 
                                                                    .. self.EVOLUTION_INDEX_TO_LEVEL[self.cycle][index] .. '?', 'Yes', function()
                                                        Battle.setupBattle('Hekaton Battle', self.EVOLUTION_INDEX_TO_LEVEL[self.cycle][index])
                                                    end)
                                                end
                                            end
                                        end })
            end

            if level[Constants.LABYRINTHAUROS] ~= nil then
                y = yStart - 30
                self.ui['evolution_' .. index .. '_' .. Constants.LABYRINTHAUROS .. '_checkbox'] = 
                            self.ui.main_panel:checkbox({ id = 'evolution-' .. index .. '-' .. Constants.LABYRINTHAUROS .. '-checkbox',
                                        checked = level[Constants.LABYRINTHAUROS], width = 55, height = 55,
                                        x = x, y = y, onClick = function(_, button)
                                            level[Constants.LABYRINTHAUROS] = not level[Constants.LABYRINTHAUROS]
                                            self.ui['evolution_' .. index .. '_' .. Constants.LABYRINTHAUROS .. '_checkbox']:setChecked(level[Constants.LABYRINTHAUROS])
                                            Log:debug('Evolution track section %s-%s set to %s.', index, Constants.LABYRINTHAUROS, tostring(level[Constants.LABYRINTHAUROS]))
                                            
                                            if level[Constants.LABYRINTHAUROS] == true then
                                                GlobalUi.showConfirmationDialog('Do you want to setup Labyrinthauros Battle - Level ' 
                                                                    .. self.EVOLUTION_INDEX_TO_LEVEL[self.cycle][index] .. '?', 'Yes', function()
                                                        Battle.setupBattle('Labyrinthauros Battle', self.EVOLUTION_INDEX_TO_LEVEL[self.cycle][index])
                                                end)
                                                
                                            end
                                        end })
            end
        end
    end

    ------------------------
    -- Boss primordial track
    local xStart = 332
    local yStart = 17
    for index = 1, 4 do
        self.ui['boss_'..index..'_checkbox'] = self.ui.main_panel:checkbox({ id = 'boss-' .. index .. '-checkbox',
                                checked = (self.boss_track >= index), width = 65, height = 65,
                                x = xStart + (index-1) * 56, y = yStart, onClick = function(_, button)
                                    if self.boss_track >= index then
                                        self.boss_track = index - 1
                                    else
                                        self.boss_track = index
                                        -- Setup the battle if we add a cross
                                        GlobalUi.showConfirmationDialog('Do you want to setup Alpha Temenos Battle - Level 1?', 'Yes', function()
                                                    Battle.setupBattle('Temenos Battle', Constants.LEVEL_1)
                                        end)
                                    end

                                    for jndex = 1, self.boss_track do
                                        self.ui['boss_'..jndex..'_checkbox']:setChecked(true)
                                    end

                                    for jndex = self.boss_track + 1, 4 do
                                        self.ui['boss_'..jndex..'_checkbox']:setChecked(false)
                                    end
                                    
                                    Log:debug('Boss track set to %s.', self.boss_track)
                                end })
    end

    ------------------------
    -- Adversary track
    local xStart = 990
    self.ui['adversary_unlocked_checkbox'] = self.ui.main_panel:checkbox({ id = 'adversary-unlocked-checkbox',
                                checked = self.adversary_unlocked, width = 50, height = 50,
                                x = xStart - 52, y = yStart + 4, onClick = function(_, button)
                                    self.adversary_unlocked = not self.adversary_unlocked
                                    self.ui['adversary_unlocked_checkbox']:setChecked(self.adversary_unlocked)
                                    Log:debug('Adversary unlocked set to %s.', tostring(self.adversary_unlocked))
                                end })

    for index = 1, 5 do
        self.ui['adversary_'..index..'_checkbox'] = self.ui.main_panel:checkbox({ id = 'adversary-' .. index .. '-checkbox',
                                checked = (self.adversary_track >= index), width = 65, height = 65,
                                x = xStart + (index-1) * 56, y = yStart, onClick = function(_, button)
                                    if self.adversary_track >= index then
                                        self.adversary_track = index - 1
                                    else
                                        self.adversary_track = index
                                        -- Setup the battle if we add a cross
                                        GlobalUi.showConfirmationDialog('Do you want to setup Hermesian Pursuer Battle - Level 1?', 'Yes', function()
                                            Battle.setupBattle('Pursuer Battle', Constants.LEVEL_1)
                                        end)
                                    end

                                    for jndex = 1, self.adversary_track do
                                        self.ui['adversary_'..jndex..'_checkbox']:setChecked(true)
                                    end

                                    for jndex = self.adversary_track + 1, 5 do
                                        self.ui['adversary_'..jndex..'_checkbox']:setChecked(false)
                                    end
                                    
                                    Log:debug('Adversary track set to %s.', self.adversary_track)
                                end })
    end

    ------------------------
    -- Mortal resource track
    local xStart, yStart = 77, -239
    -- This requires a named loop to keep the resources order....
    for index, resource in ipairs({'trireme', 'monument', 'armament'}) do
        self.ui[resource .. '_button'] = self.ui.main_panel:button({ id = resource .. '-button', fontSize = 40, 
                            width = 55, height = 55, 
                            x = xStart, y = yStart + (index-1) * -138 + (index == 3 and 5 or 0), -- Somehow the boxes aren't linear
                            colors = Ui.TRANSPARENT_INPUT_COLORS, textAlignment = 'MiddleCenter',
                            text = tostring(self.resources[resource]), onClick = function(_, button)
            
                local newValue = self.resources[resource] + (button == '-2' and -1 or 1)
                newValue = Utils.clamp(newValue, 0, nil)
                self:setResource(resource, newValue)
        end })

        for jndex = 1, 2 do
            self.ui[resource .. '_note_input_' .. jndex] = self.ui.main_panel:input({ id = resource .. '-note-button-' .. jndex,
                                fontSize = 24, width = 240, height = 35, textAlignment = 'LeftCenter',
                                x = xStart + 90, y = yStart - 56 + (index-1) * -132 + (jndex-1) * -28, -- Somehow the boxes aren't linear
                                colors = Ui.TRANSPARENT_INPUT_COLORS, placeholder = ' ',
                                text = self.resources[resource .. '_note'][jndex], onValueChanged = function(_, newValue)
                
                self:setResourceNote(resource, jndex, newValue)
            end })
        end
    end

    -- Primordial resources
    local xStart, yStart = 365, -239
    local xOffset, yOffset = 234, -138
    local resourcesArray = {'muscle_cluster', 'calcified_knucle_bone', 'infused_mechanism', 'fleshy_mantle', 'fear_essence', 
                'maze_fragment', 'grotesque_beak', 'powdered_matter', 'raw_ambrosia'}
    for index, resource in ipairs(resourcesArray) do
        local x = xStart + xOffset * ((index - 1) % 4) + (((index == 3 or index == 7) and -5) or 0) -- Fix some inconsistencies
        local y = yStart + yOffset * math.floor((index - 1)/4) + (index == 9 and 5 or 0)

        self.ui[resource .. '_button'] = self.ui.main_panel:button({ id = resource .. '-button', fontSize = 40, 
                            width = 55, height = 55, x = x, y = y, 
                            colors = Ui.TRANSPARENT_INPUT_COLORS, textAlignment = 'MiddleCenter',
                            text = tostring(self.resources[resource]), onClick = function(_, button)
            
                local newValue = self.resources[resource] + (button == '-2' and -1 or 1)
                newValue = Utils.clamp(newValue, 0, nil)
                self:setResource(resource, newValue)
        end })

        for jndex = 1, 2 do
            self.ui[resource .. '_note_input_' .. jndex] = self.ui.main_panel:input({ id = resource .. '-note-button-' .. jndex, 
                                fontSize = 24, width = 220, height = 35, x = x + 84, y = y - 56 + (index > 4 and 7 or 0) + (jndex-1) * -28,
                                colors = Ui.TRANSPARENT_INPUT_COLORS, placeholder = ' ',
                                text = self.resources[resource .. '_note'][jndex], onValueChanged = function(_, newValue)
                
                self:setResourceNote(resource, jndex, newValue)
            end })
        end
    end

    for jndex = 1, 2 do
        self.ui['cores_note_input_' .. jndex] = self.ui.main_panel:input({ id = 'cores-note-button-' .. jndex, fontSize = 24, 
                            width = 690, height = 35, x = 912, y = -559 + (jndex-1) * -28,
                            colors = Ui.TRANSPARENT_INPUT_COLORS, placeholder = ' ',
                            text = self.resources['cores_note'][jndex], onValueChanged = function(_, newValue)
            
                self:setResourceNote('cores', jndex, newValue)
        end })
    end

    ------------------------
    -- Divine resources
    local xStart, yStart = 167, -801
    for index, resource in ipairs({'priests', 'sisyphus_tears', 'rare_resources'}) do
        if resource ~= 'rare_resources' then
            self.ui[resource .. '_button'] = self.ui.main_panel:button({ id = resource .. '-button', fontSize = 40, 
                                width = 55, height = 55, x = xStart + (index-1) * 366, y = yStart, 
                                colors = Ui.TRANSPARENT_INPUT_COLORS, textAlignment = 'MiddleCenter',
                                text = tostring(self.resources[resource]), onClick = function(_, button)
                
                local newValue = self.resources[resource] + (button == '-2' and -1 or 1)
                newValue = Utils.clamp(newValue, 0, nil)
                self:setResource(resource, newValue)
            end })
        end

        for jndex = 1, 2 do
            self.ui[resource .. '_note_input_' .. jndex] = self.ui.main_panel:input({ id = resource .. '-note-button-' .. jndex, 
                                    fontSize = 24, width = 300, height = 35, x = xStart + 110 + (index-1) * 374, y = yStart - 58 + (jndex-1) * -28,
                                    colors = Ui.TRANSPARENT_INPUT_COLORS, placeholder = ' ',
                                    text = self.resources[resource .. '_note'][jndex], onValueChanged = function(_, newValue)
                    
                self:setResourceNote(resource, jndex, newValue)
            end })
        end
    end
end

function Argo:createSheetUiForCycleII()
    self.ui.main_panel = self.ui.root:panel({ id = 'global-panel', width = 4000, height = 3000 })
    -- panel.attributes.color = 'Green'
    
    ------------------------
    -- Top left section
    self.ui.story_card_input = self.ui.main_panel:input({ id = 'story-card-input', width = 150, height = 60, x = -1110, y = 590, 
                        fontSize = 50, placeholder = ' ', text = self.story_card, colors = Ui.TRANSPARENT_INPUT_COLORS,
                        textAlignment = 'MiddleCenter', onValueChanged = function(_, value)
                            self:setStoryCard(value)
                        end })
    self.ui.doom_card_input = self.ui.main_panel:input({ id = 'doom-card-input', width = 150, height = 60, x = -820, y = 590,
                        fontSize = 50, placeholder = ' ', text = self.doom_card, colors = Ui.TRANSPARENT_INPUT_COLORS,
                        textAlignment = 'MiddleCenter', onValueChanged = function(_, value) 
                            self:setDoomCard(value)
                        end })
    self.ui.map_tile_input = self.ui.main_panel:input({ id = 'map-tile-input', width = 150, height = 60, x = -530, y = 590,
                        fontSize = 50, placeholder = ' ', text = self.map_tile, colors = Ui.TRANSPARENT_INPUT_COLORS,
                        textAlignment = 'MiddleCenter', onValueChanged = function(_, value) 
                            self:setMapTile(value)
                        end })

    self.ui.humanity_button = self.ui.main_panel:button({ id = 'humanity-button', fontSize = 40, 
                        width = 70, height = 50, x = -1000, y = 503,
                        colors = Ui.TRANSPARENT_INPUT_COLORS, textAlignment = 'MiddleCenter',
                        text = tostring(self.humanity), onClick = function(_, button)

        local newValue = self.humanity + (button == '-2' and -1 or 1)
        -- newValue = Utils.clamp(newValue, 0, nil)
        self:setHumanity(newValue)
    end })

    self.ui.defectors_button = self.ui.main_panel:button({ id = 'defectors-button', fontSize = 40, 
                        width = 55, height = 50, x = -703, y = 500,
                        colors = Ui.TRANSPARENT_INPUT_COLORS, textAlignment = 'MiddleCenter',
                        text = tostring(self.defectors), onClick = function(_, button)

        local newValue = self.defectors + (button == '-2' and -1 or 1)
        newValue = Utils.clamp(newValue, 0, nil)
        self:setDefectors(newValue)
    end })

    self.ui.defectors_unlocked_checkbox = self.ui.main_panel:checkbox({ id = 'defectors-unlocked-checkbox', 
                            width = 30, height = 30, x = -678, y = 500,
                            checked = self.defectors_unlocked, onClick = function(_, button)
                                self:setDefectorsUnlocked(not self.defectors_unlocked)
                            end })

    ------------------------
    -- Argo fate section
    self.ui.argo_fate_button = self.ui.main_panel:button({ id = 'argo-fate-button', fontSize = 40, 
                        width = 55, height = 54, x = -295, y = 745,
                        colors = Ui.TRANSPARENT_INPUT_COLORS, textAlignment = 'MiddleCenter',
                        text = tostring(self.argo_fate), onClick = function(_, button)

        self.argo_fate = self.argo_fate + (button == '-2' and -1 or 1)
        self.argo_fate = Utils.clamp(self.argo_fate, 0, 10)
        self.ui.argo_fate_button:setText(self.argo_fate)
        Log:debug('Argo fate set to %s', self.argo_fate)

        if self.argo_fate >= 10 then
            broadcastToAll('Read 0981 immediately.', Constants.WARNING_COLOR)
        end
    end })

    self.ui.argo_knowledge_button = self.ui.main_panel:button({ id = 'argo-knowledge-button', fontSize = 40, 
                        width = 80, height = 50, x = -91, y = 647,
                        colors = Ui.TRANSPARENT_INPUT_COLORS, textAlignment = 'MiddleCenter',
                        text = tostring(self.argo_knowledge), onClick = function(_, button)
        
        self.argo_knowledge = self.argo_knowledge + (button == '-2' and -1 or 1)
        self.argo_knowledge = Utils.clamp(self.argo_knowledge, 20, nil)
        self.ui.argo_knowledge_button:setText(self.argo_knowledge)
        Log:debug('Argo knowledge set to %s', self.argo_knowledge)
    end })

    ------------------------
    -- Hull/Crew
    self.ui.hull_group = self.ui.main_panel:checkboxGroup({ id = 'hull-group', onClick = function(checkbox)
        self:setHull(checkbox.checkboxValue)
    end })

    local maxCheckboxes = 6
    for i = maxCheckboxes, 0, -1 do
        self.ui['hull_'..i..'_checkbox'] = self.ui.hull_group:checkbox({ id = 'hull-'..i..'-checkbox', 
                            width = 100, height = 100, x = -983 + (maxCheckboxes-i) * 82.5 + (i < 6 and 12.5 or 0), y = 398,
                            checked = (self.hull == i) }, true)
        self.ui['hull_'..i..'_checkbox'].checkboxValue = i
    end

    self.ui['hull_unlocked_checkbox'] = self.ui.main_panel:checkbox({ id = 'hull-unlocked-checkbox', 
                            width = 50, height = 50, x = -953, y = 398,
                            checked = self.hull_unlocked, onClick = function(_, button)
                                self:setHullUnlocked(not self.hull_unlocked)
                            end })

    self.ui.crew_group = self.ui.main_panel:checkboxGroup({ id = 'crew-group', onClick = function(checkbox)
        self:setCrew(checkbox.checkboxValue)
    end })

    local maxCheckboxes = 9
    for i = maxCheckboxes, 0, -1 do
        self.ui['crew_'..i..'_checkbox'] = self.ui.crew_group:checkbox({ id = 'crew-'..i..'-checkbox', 
                            width = 100, height = 100, x = -978 + (maxCheckboxes-i) * 82.5 + (i < 9 and 15 or 0), y = 284,
                            checked = (self.crew == i) }, true)
        self.ui['crew_'..i..'_checkbox'].checkboxValue = i
    end

    self.ui['crew_unlocked_checkbox'] = self.ui.main_panel:checkbox({ id = 'crew-unlocked-checkbox', 
                            width = 50, height = 50, x = -945, y = 284,
                            checked = self.crew_unlocked, onClick = function(_, button)
                                self:setCrewUnlocked(not self.crew_unlocked)
                            end })

    -- Crew R/S list
    for index, passenger in pairs(self.passengers) do
        local indexNumber = tonumber(index)

        self.ui['passengers_' .. indexNumber .. '_input'] = self.ui.main_panel:input({ id = 'passengers-' .. indexNumber .. '-input', 
                        width = 80, height = 50, x = -975 + (9 - indexNumber) * 82.5 + (indexNumber < 9 and 17 or 0), y = 195,
                        fontSize = 40, placeholder = ' ', text = passenger, colors = Ui.TRANSPARENT_INPUT_COLORS,
                        textAlignment = 'MiddleCenter', onValueChanged = function(_, value)
                            self:setPassenger(index, value)
                        end })
    end

    ------------------------
    -- Titans
    self.ui.abilities_limit_input = self.ui.main_panel:input({ id = 'abilities-limit-input', width = 95, height = 45, x = -79, y = 199, 
                        fontSize = 45, placeholder = ' ', text = tostring(self.abilities_limit), colors = Ui.TRANSPARENT_INPUT_COLORS,
                        textAlignment = 'MiddleCenter', characterValidation = 'Integer', onValueChanged = function(_, value) 
                            self:setAbilitiesLimit(value)
                        end })
    self.ui.current_titans_input = self.ui.main_panel:input({ id = 'current-titans-input', width = 60, height = 45, x = -105, y = 145.5,
                        fontSize = 35, placeholder = ' ', text = tostring(self.current_titans or ''), colors = Ui.TRANSPARENT_INPUT_COLORS,
                        textAlignment = 'MiddleCenter', characterValidation = 'Integer', onValueChanged = function(_, value) 
                            self:setCurrentTitans(value)
                        end })
    self.ui.max_titans_input = self.ui.main_panel:input({ id = 'max-titans-input', width = 60, height = 45, x = -58, y = 145.5,
                        fontSize = 35, placeholder = ' ', text = tostring(self.max_titans or ''), colors = Ui.TRANSPARENT_INPUT_COLORS,
                        textAlignment = 'MiddleCenter', characterValidation = 'Integer', onValueChanged = function(_, value) 
                            self:setTitansLimit(value)
                        end })

    for index, text in ipairs(self.titans_list1) do
        self.ui['titans_input1_line' .. index] = self.ui.main_panel:input({ id = 'titans-list1-input-' .. index, fontSize = 30, 
                                colors = Ui.TRANSPARENT_INPUT_COLORS, width = 585, height = 40, x = -942, y = 114 + (index-1)*-37 ,
                                text = text, placeholder = ' ', onValueChanged = function(_, value)
                                    self:setTitansList1(index, value)
                                end })
    end

    for index, text in ipairs(self.titans_list2) do
        self.ui['titans_input2_line' .. index] = self.ui.main_panel:input({ id = 'titans-list2-input-' .. index, fontSize = 30, 
                                colors = Ui.TRANSPARENT_INPUT_COLORS, width = 585, height = 40, x = -333, y = 114 + (index-1)*-37 ,
                                text = text, placeholder = ' ', onValueChanged = function(_, value)
                                    self:setTitansList2(index, value)
                                end })
    end

    ------------------------
    -- Adventure tracks
    local xStart, yStart = -1070, -359
    local xStep = 50
    local xOffset, yOffset = 406, -123
    -- Named array for ordering purposes
    local ordering = {
        Constants.CONSIDER_THE_ANT, Constants.THE_OTHER_THERMOPYLAE, Constants.FROM_THE_ASHES,
        Constants.INTENDED_PURPOSE, Constants.MISERY_INDUSTRY, Constants.PARABLE_OF_THE_BUTTERFLY,
        Constants.TRUTH_TO_WEAKNESS, Constants.WHEN_THE_LAND_MEETS_THE_SEA,
        -- [Constants.CYCLE_III] = {Constants.ROAD_LESS_TRAVELED, Constants.CHILDREN_OF_THE_SUN, Constants.WHAT_WE_LEFT_BEHIND,
        -- Constants.OF_WAX_AND_PROMISES, Constants.CANT_GO_BACK, Constants.SIN_OF_THE_FATHERS,
        -- Constants.COMING_OF_AGE},
    }

    for adventureIndex, adventureName in ipairs(ordering) do
        local adventure = self.adventure_tracks[adventureName]

        for index, value in ipairs(adventure) do
            -- Calculate it, in cycle 1 it's 3 columns and 3 rows
            local x = xStart + (index - math.ceil(#adventure / 2) - ((#adventure % 2) == 0 and 0.5 or 0)) * xStep + xOffset * ((adventureIndex - 1) % 3) 
                                    + (adventureIndex % 3 == 2 and -24 or 0) + (adventureIndex % 3 >= 2 and 2 or 0)
            local y = yStart + yOffset * math.floor((adventureIndex - 1)/3)

            if value == true or value == false then
                self.ui[adventureName .. '_track_input_' .. index] = self.ui.main_panel:checkbox({ 
                            id = adventureName .. '-track-input-' .. index, 
                            width = 65, height = 65, x = x, y = y,
                            checked = value, onClick = function(_, button)
                                self:setAdventureTrack(adventureName, index, not adventure[index])
                            end })
            else
                self.ui[adventureName .. '_track_input_' .. index] = self.ui.main_panel:input({
                            id = adventureName .. '-track-input-' .. index, colors = Ui.TRANSPARENT_INPUT_COLORS,
                            text = ((tonumber(adventure[index]) or 0) > 0 and tostring(adventure[index])) or '',
                            width = 58, height = 50, x = x, y = y, textAlignment = 'MiddleCenter',
                            characterLimit = 2, characterValidation = 'Integer', fontSize = 35, placeholder = ' ', onValueChanged = function(_, newValue) 
                                self:setAdventureTrack(adventureName, index, newValue)
                            end})
            end
        end
    end
    
    ------------------------
    -- Diplomacy tracks
    local cycleTracks = self.diplomacy_tracks
    local xStart, yStart = -1355, -782.5
    for index, factionName in ipairs({ Constants.HELOTS, Constants.CYCLOPES, Constants.SYMMACHY }) do
        self.ui[factionName .. '_checkbox_group'] = self.ui.main_panel:checkboxGroup({ id = factionName .. '-checkbox-group', onClick = function(checkbox)
            checkbox:select()
            cycleTracks[factionName] = checkbox.checkboxValue
            Log:debug(factionName .. ' diplomacy set to %s', cycleTracks[factionName])
        end })

        for i = 0, 15 do
            local jump = 0
            if i >= 3 then jump = jump + 62.7 end
            if i >= 7 then jump = jump + 78 end
            if i >= 12 then jump = jump + 89 end

            self.ui[factionName .. '_'..i..'_checkbox'] = self.ui[factionName .. '_checkbox_group']:checkbox({ id = factionName .. '-'..i..'-checkbox', 
                                width = 50, height = 50, x = xStart + jump + (10 + i) * 41, y = yStart + (index - 1) * -49,
                                checked = (cycleTracks[factionName] == i) }, true)
            self.ui[factionName .. '_'..i..'_checkbox'].checkboxValue = i
        end
    end
    
    ------------------------
    -- Godforms
    -- If checkbox checked -> set to true
    -- If text entered -> set to the text
    -- Otherwise set it to nil
    local xStart, yStart = 89, 765
    for index = 1, 6 do
        self.ui['godform_'..index..'_checkbox'] = self.ui.main_panel:checkbox({ id = 'godform-' .. index .. '-checkbox',
                            checked = (self.godforms[index] ~= nil), width = 65, height = 65,
                            x = xStart, y = yStart + (index-1) * -55, onClick = function(_, button)
                                if self.godforms[index] == nil then
                                    self.godforms[index] = true
                                    self.ui['godform_'..index..'_checkbox']:setChecked(true)
                                    Log:debug('Godform %s activated.', index)
                                else
                                    self.godforms[index] = nil
                                    self.ui['godform_'..index..'_checkbox']:setChecked(false)
                                    self.ui['godform_'..index..'_input']:setText('')
                                    Log:debug('Godform %s deactivated.', index)
                                end
                            end })

        self.ui['godform_'..index..'_input'] = self.ui.main_panel:input({ id = 'godform-' .. index .. '-input',
                            text = (self.godforms[index] == true and '') or self.godforms[index], width = 500, height = 50,
                            fontSize = 40, colors = Ui.TRANSPARENT_INPUT_COLORS, placeholder = ' ',
                            x = xStart + 290, y = yStart + 10 + (index-1) * -55, onValueChanged = function(_, newValue)
                                self.godforms[index] = newValue
                                Log:debug('Godform %s set to %s', index, newValue)

                                if self.godforms[index] == '' then
                                    self.godforms[index] = nil
                                    self.ui['godform_'..index..'_checkbox']:setChecked(false)
                                    Log:debug('Godform %s deactivated.', index)
                                elseif self.godforms[index] and self.godforms[index] ~= '' then
                                    self.ui['godform_'..index..'_checkbox']:setChecked(true)
                                    Log:debug('Godform %s activated.', index)
                                end
                            end })
    end

    ------------------------
    -- Summons
    -- If checkbox checked -> set to true
    -- If text entered -> set to the text
    -- Otherwise set it to nil
    self.ui.summons_limit_button = self.ui.main_panel:button({ id = 'summons-button', fontSize = 40, 
                        width = 55, height = 55, x = 1237, y = 820,
                        colors = Ui.TRANSPARENT_INPUT_COLORS, textAlignment = 'MiddleCenter',
                        text = tostring(self.summons_limit), onClick = function(_, button)
        
        self.summons_limit = self.summons_limit + (button == '-2' and -1 or 1)
        self.summons_limit = Utils.clamp(self.summons_limit, 0, nil)
        self.ui.summons_limit_button:setText(self.summons_limit)
        Log:debug('Summons limit set to %s', self.summons_limit)
    end })

    local xStart, yStart = 713, 765
    for index = 1, 6 do
        self.ui['summon_'..index..'_checkbox'] = self.ui.main_panel:checkbox({ id = 'summon-' .. index .. '-checkbox',
                            checked = (self.summons[index] ~= nil), width = 65, height = 65,
                            x = xStart, y = yStart + (index-1) * -55, onClick = function(_, button)
                                if self.summons[index] == nil then
                                    self.summons[index] = true
                                    self.ui['summon_'..index..'_checkbox']:setChecked(true)
                                    Log:debug('Summon %s activated.', index)
                                else
                                    self.summons[index] = nil
                                    self.ui['summon_'..index..'_checkbox']:setChecked(false)
                                    self.ui['summon_'..index..'_input']:setText('')
                                    Log:debug('Summon %s deactivated.', index)
                                end
                            end })

        self.ui['summon_'..index..'_input'] = self.ui.main_panel:input({ id = 'summon-' .. index .. '-input',
                            text = self.summons[index], width = 500, height = 50,
                            fontSize = 40, colors = Ui.TRANSPARENT_INPUT_COLORS, placeholder = ' ',
                            x = xStart + 290, y = yStart + 10 + (index-1) * -55, onValueChanged = function(_, newValue)
                                self.summons[index] = newValue
                                Log:debug('Summon %s set to %s', index, newValue)

                                if self.summons[index] == '' then
                                    self.summons[index] = nil
                                    self.ui['summon_'..index..'_checkbox']:setChecked(false)
                                    Log:debug('Summon %s deactivated.', index)
                                elseif self.summons[index] and self.summons[index] ~= '' then
                                    self.ui['summon_'..index..'_checkbox']:setChecked(true)
                                    Log:debug('Summon %s activated.', index)
                                end
                            end })
    end

    ------------------------
    -- Evolution tracks
    local xStart, yStart = 656, 275
    for index, level in ipairs(self.evolution_track) do
        local x = xStart + (index - 1) * 47.5
        local y = yStart

        if level[Constants.MIXED] ~= nil then
            self.ui['evolution_' .. index .. '_' .. Constants.MIXED .. '_checkbox'] = 
                            self.ui.main_panel:checkbox({ id = 'evolution-' .. index .. '-' .. Constants.MIXED .. '-checkbox',
                                        checked = level[Constants.MIXED], width = 55, height = 55,
                                        x = x, y = y, onClick = function(_, button)
                                            level[Constants.MIXED] = not level[Constants.MIXED]
                                            self.ui['evolution_' .. index .. '_' .. Constants.MIXED .. '_checkbox']:setChecked(level[Constants.MIXED])
                                            Log:debug('Evolution track section %s set to %s.', index, tostring(level[Constants.MIXED]))

                                            if(level[Constants.MIXED]) then
                                                -- Find the correct level, up to the current evolution level
                                                local lastMarkedCyclonusIndex, lastMarkedChimeraIndex = 0, 0
    
                                                for jndex, element in ipairs(self:getEvolutionTrack()) do
                                                    if jndex >= index then break end

                                                    if element[Constants.CYCLONUS] == true then
                                                        lastMarkedCyclonusIndex = jndex
                                                    end

                                                    if element[Constants.CHIMERA_METASTASIOS] == true then
                                                        lastMarkedChimeraIndex = jndex
                                                    end
                                                end

                                                local allowCyclonus, allowChimera = false, false
                                                if index == lastMarkedCyclonusIndex + 1 then allowCyclonus = true end
                                                if index == lastMarkedChimeraIndex + 1 then allowChimera = true end

                                                -- Let the player choose which Primordial to setup
                                                local confirmationText = 'Which primordial do you want to setup?'
                                                if not allowCyclonus and not allowChimera then confirmationText = 'You cannot fill this box' end

                                                GlobalUi.showConfirmationDialog(confirmationText, (allowCyclonus and 'Cyclonus') or false, (allowCyclonus and function()
                                                    Battle.setupBattle('Cyclonus Battle', self.EVOLUTION_INDEX_TO_LEVEL[self.cycle][index])
                                                end) or nil, (allowChimera and 'Chimera') or false, (allowChimera and function()
                                                    Battle.setupBattle('Chimera Metastasios Battle', self.EVOLUTION_INDEX_TO_LEVEL[self.cycle][index])
                                                end) or nil)
                                            end
                                        end })
        else
            if level[Constants.CYCLONUS] ~= nil then
                y = yStart + 26
                self.ui['evolution_' .. index .. '_' .. Constants.CYCLONUS .. '_checkbox'] = 
                            self.ui.main_panel:checkbox({ id = 'evolution-' .. index .. '-' .. Constants.CYCLONUS .. '-checkbox',
                                        checked = level[Constants.CYCLONUS], width = 55, height = 55,
                                        x = x, y = y, onClick = function(_, button)
                                            level[Constants.CYCLONUS] = not level[Constants.CYCLONUS]
                                            self.ui['evolution_' .. index .. '_' .. Constants.CYCLONUS .. '_checkbox']:setChecked(level[Constants.CYCLONUS])
                                            Log:debug('Evolution track section %s-%s set to %s.', index, Constants.CYCLONUS, tostring(level[Constants.CYCLONUS]))

                                            if level[Constants.CYCLONUS] == true then
                                                GlobalUi.showConfirmationDialog('Do you want to setup Cyclonus Battle - Level ' 
                                                                .. self.EVOLUTION_INDEX_TO_LEVEL[self.cycle][index] .. '?', 'Yes', function()
                                                    Battle.setupBattle('Cyclonus Battle', self.EVOLUTION_INDEX_TO_LEVEL[self.cycle][index])
                                                end)
                                            end
                                        end })
            end

            if level[Constants.CHIMERA_METASTASIOS] ~= nil then
                y = yStart - 25
                self.ui['evolution_' .. index .. '_' .. Constants.CHIMERA_METASTASIOS .. '_checkbox'] = 
                            self.ui.main_panel:checkbox({ id = 'evolution-' .. index .. '-' .. Constants.CHIMERA_METASTASIOS .. '-checkbox',
                                        checked = level[Constants.CHIMERA_METASTASIOS], width = 55, height = 55,
                                        x = x, y = y, onClick = function(_, button)
                                            level[Constants.CHIMERA_METASTASIOS] = not level[Constants.CHIMERA_METASTASIOS]
                                            self.ui['evolution_' .. index .. '_' .. Constants.CHIMERA_METASTASIOS .. '_checkbox']:setChecked(level[Constants.CHIMERA_METASTASIOS])
                                            Log:debug('Evolution track section %s-%s set to %s.', index, Constants.CHIMERA_METASTASIOS, tostring(level[Constants.CHIMERA_METASTASIOS]))
                                            
                                            if level[Constants.CHIMERA_METASTASIOS] == true then
                                                GlobalUi.showConfirmationDialog('Do you want to setup Chimera Metastasios Battle - Level ' 
                                                                    .. self.EVOLUTION_INDEX_TO_LEVEL[self.cycle][index] .. '?', 'Yes', function()
                                                        Battle.setupBattle('Chimera Metastasios Battle', self.EVOLUTION_INDEX_TO_LEVEL[self.cycle][index])
                                                end)
                                                
                                            end
                                        end })
            end
        end
    end

    ------------------------
    -- Boss primordial track
    local xStart = 348
    local yStart = 121
    for index = 1, 4 do
        self.ui['boss_'..index..'_checkbox'] = self.ui.main_panel:checkbox({ id = 'boss-' .. index .. '-checkbox',
                                checked = (self.boss_track >= index), width = 65, height = 65,
                                x = xStart + (index-1) * 56, y = yStart, onClick = function(_, button)
                                    if self.boss_track >= index then
                                        self.boss_track = index - 1
                                    else
                                        self.boss_track = index
                                        -- Setup the battle if we add a cross
                                        GlobalUi.showConfirmationDialog('Do you want to setup What Are You? Battle - Level 1?', 'Yes', function()
                                                    Battle.setupBattle('What Are You? Battle', Constants.LEVEL_1)
                                        end)
                                    end

                                    for jndex = 1, self.boss_track do
                                        self.ui['boss_'..jndex..'_checkbox']:setChecked(true)
                                    end

                                    for jndex = self.boss_track + 1, 4 do
                                        self.ui['boss_'..jndex..'_checkbox']:setChecked(false)
                                    end
                                    
                                    Log:debug('Boss track set to %s.', self.boss_track)
                                end })
    end

    ------------------------
    -- Adversary track
    local xStart = 982
    local yStart = 121
    self.ui['adversary_unlocked_checkbox'] = self.ui.main_panel:checkbox({ id = 'adversary-unlocked-checkbox',
                                checked = self.adversary_unlocked, width = 50, height = 50,
                                x = xStart - 57, y = yStart, onClick = function(_, button)
                                    self.adversary_unlocked = not self.adversary_unlocked
                                    self.ui['adversary_unlocked_checkbox']:setChecked(self.adversary_unlocked)
                                    Log:debug('Adversary unlocked set to %s.', tostring(self.adversary_unlocked))
                                end })

    for index = 1, 5 do
        self.ui['adversary_'..index..'_checkbox'] = self.ui.main_panel:checkbox({ id = 'adversary-' .. index .. '-checkbox',
                                checked = (self.adversary_track >= index), width = 65, height = 65,
                                x = xStart + (index-1) * 56, y = yStart, onClick = function(_, button)
                                    if self.adversary_track >= index then
                                        self.adversary_track = index - 1
                                    else
                                        self.adversary_track = index
                                        -- Setup the battle if we add a cross
                                        GlobalUi.showConfirmationDialog('Do you want to setup Hermesian Pursuer Battle - Level 1?', 'Yes', function()
                                            Battle.setupBattle('Pursuer Battle', Constants.LEVEL_1)
                                        end)
                                    end

                                    for jndex = 1, self.adversary_track do
                                        self.ui['adversary_'..jndex..'_checkbox']:setChecked(true)
                                    end

                                    for jndex = self.adversary_track + 1, 5 do
                                        self.ui['adversary_'..jndex..'_checkbox']:setChecked(false)
                                    end
                                    
                                    Log:debug('Adversary track set to %s.', self.adversary_track)
                                end })
    end

    ------------------------
    -- Mortal resource track
    local xStart, yStart = 90, -128.5
    -- This requires a named loop to keep the resources order....
    for index, resource in ipairs({'war_trireme', 'relief', 'war_machine'}) do
        self.ui[resource .. '_button'] = self.ui.main_panel:button({ id = resource .. '-button', fontSize = 40, 
                            width = 55, height = 55, 
                            x = xStart, y = yStart + (index-1) * -138 + (index == 3 and 5 or 0), -- Somehow the boxes aren't linear
                            colors = Ui.TRANSPARENT_INPUT_COLORS, textAlignment = 'MiddleCenter',
                            text = tostring(self.resources[resource]), onClick = function(_, button)
            
                local newValue = self.resources[resource] + (button == '-2' and -1 or 1)
                newValue = Utils.clamp(newValue, 0, nil)
                self:setResource(resource, newValue)
        end })

        for jndex = 1, 2 do
            self.ui[resource .. '_note_input_' .. jndex] = self.ui.main_panel:input({ id = resource .. '-note-button-' .. jndex,
                                fontSize = 24, width = 240, height = 35, textAlignment = 'LeftCenter',
                                x = xStart + 90, y = yStart - 56 + (index-1) * -132 + (jndex-1) * -28, -- Somehow the boxes aren't linear
                                colors = Ui.TRANSPARENT_INPUT_COLORS, placeholder = ' ',
                                text = self.resources[resource .. '_note'][jndex], onValueChanged = function(_, newValue)
                
                self:setResourceNote(resource, jndex, newValue)
            end })
        end
    end

    -- Primordial resources
    local xStart, yStart = 362, -128.5
    local xOffset, yOffset = 223, -137
    local resourcesArray = {'fear_essence', 'maze_fragment', 'cyclopean_metal', 'black_chain', 'chimeric_tar', 
                'supersolid_relief_mass', 'living_abyss', 'skin_of_malice', 'grotesque_beak', 'powdered_matter', 
                'retractable_mechanism', 'reliefshell_fragment', 'violent_ambrosia'}
    for index, resource in ipairs(resourcesArray) do
        local x = xStart + xOffset * ((index - 1) % 4) + ((index % 4 == 0 and 24 or 0)) -- + (((index == 3 or index == 7) and -5) or 0) -- Fix some inconsistencies
        local y = yStart + yOffset * math.floor((index - 1)/4) + (index == 13 and 5 or 0)

        self.ui[resource .. '_button'] = self.ui.main_panel:button({ id = resource .. '-button', fontSize = 40, 
                            width = 55, height = 55, x = x, y = y, 
                            colors = Ui.TRANSPARENT_INPUT_COLORS, textAlignment = 'MiddleCenter',
                            text = tostring(self.resources[resource]), onClick = function(_, button)
            
                local newValue = self.resources[resource] + (button == '-2' and -1 or 1)
                newValue = Utils.clamp(newValue, 0, nil)
                self:setResource(resource, newValue)
        end })

        for jndex = 1, 2 do
            self.ui[resource .. '_note_input_' .. jndex] = self.ui.main_panel:input({ id = resource .. '-note-button-' .. jndex, 
                                fontSize = 24, width = 220, height = 35, x = x + 84, y = y - 56 + (index > 4 and 7 or 0) + (jndex-1) * -28,
                                colors = Ui.TRANSPARENT_INPUT_COLORS, placeholder = ' ',
                                text = self.resources[resource .. '_note'][jndex], onValueChanged = function(_, newValue)
                
                self:setResourceNote(resource, jndex, newValue)
            end })
        end
    end

    for jndex = 1, 2 do
        self.ui['cores_note_input_' .. jndex] = self.ui.main_panel:input({ id = 'cores-note-button-' .. jndex, fontSize = 24, 
                            width = 690, height = 35, x = 912, y = -581 + (jndex-1) * -28,
                            colors = Ui.TRANSPARENT_INPUT_COLORS, placeholder = ' ',
                            text = self.resources['cores_note'][jndex], onValueChanged = function(_, newValue)
            
                self:setResourceNote('cores', jndex, newValue)
        end })
    end

    ------------------------
    -- Divine resources
    local xStart, yStart = 88, -786
    for index, resource in ipairs({'priests', 'sisyphus_tears', 'pygmalion_stones', 'rare_resources'}) do
        if resource ~= 'rare_resources' then
            self.ui[resource .. '_button'] = self.ui.main_panel:button({ id = resource .. '-button', fontSize = 40, 
                                width = 55, height = 55, x = xStart + (index-1) * 308 + (index >= 3 and -8 or 0), y = yStart, 
                                colors = Ui.TRANSPARENT_INPUT_COLORS, textAlignment = 'MiddleCenter',
                                text = tostring(self.resources[resource]), onClick = function(_, button)
                
                local newValue = self.resources[resource] + (button == '-2' and -1 or 1)
                newValue = Utils.clamp(newValue, 0, nil)
                self:setResource(resource, newValue)
            end })
        end

        for jndex = 1, 2 do
            self.ui[resource .. '_note_input_' .. jndex] = self.ui.main_panel:input({ id = resource .. '-note-button-' .. jndex, 
                                    fontSize = 24, width = 300, height = 35, x = xStart + 118 + (index-1) * 310 + (index >= 3 and -8 or 0), y = yStart - 54 + (jndex-1) * -28,
                                    colors = Ui.TRANSPARENT_INPUT_COLORS, placeholder = ' ',
                                    text = self.resources[resource .. '_note'][jndex], onValueChanged = function(_, newValue)
                    
                self:setResourceNote(resource, jndex, newValue)
            end })
        end
    end
end

function Argo:createSheetUiForCycleIII()
    self.ui.main_panel = self.ui.root:panel({ id = 'global-panel', width = 4000, height = 3000 })
    -- panel.attributes.color = 'Green'
    
    ------------------------
    -- Top left section
    self.ui.story_card_input = self.ui.main_panel:input({ id = 'story-card-input', width = 150, height = 60, x = -1110, y = 570, 
                        fontSize = 50, placeholder = ' ', text = self.story_card, colors = Ui.TRANSPARENT_INPUT_COLORS,
                        textAlignment = 'MiddleCenter', onValueChanged = function(_, value)
                            self:setStoryCard(value)
                        end })
    self.ui.doom_card_input = self.ui.main_panel:input({ id = 'doom-card-input', width = 150, height = 60, x = -820, y = 570,
                        fontSize = 50, placeholder = ' ', text = self.doom_card, colors = Ui.TRANSPARENT_INPUT_COLORS,
                        textAlignment = 'MiddleCenter', onValueChanged = function(_, value) 
                            self:setDoomCard(value)
                        end })
    self.ui.map_tile_input = self.ui.main_panel:input({ id = 'map-tile-input', width = 150, height = 60, x = -530, y = 570,
                        fontSize = 50, placeholder = ' ', text = self.map_tile, colors = Ui.TRANSPARENT_INPUT_COLORS,
                        textAlignment = 'MiddleCenter', onValueChanged = function(_, value) 
                            self:setMapTile(value)
                        end })

    self.ui.loop_length_button = self.ui.main_panel:button({ id = 'loop-length-button', fontSize = 40, 
                        width = 70, height = 50, x = -1018, y = 475,
                        colors = Ui.TRANSPARENT_INPUT_COLORS, textAlignment = 'MiddleCenter',
                        text = tostring(self.loop_length), onClick = function(_, button)

        local newValue = self.loop_length + (button == '-2' and -1 or 1)
        -- newValue = Utils.clamp(newValue, 0, nil)
        self:setLoopLength(newValue)
    end })

    self.ui.frozen_time_button = self.ui.main_panel:button({ id = 'frozen-time-button', fontSize = 40, 
                        width = 55, height = 50, x = -703, y = 475,
                        colors = Ui.TRANSPARENT_INPUT_COLORS, textAlignment = 'MiddleCenter',
                        text = tostring(self.frozen_time), onClick = function(_, button)

        local newValue = self.frozen_time + (button == '-2' and -1 or 1)
        newValue = Utils.clamp(newValue, 0, nil)
        self:setFrozenTime(newValue)
    end })

    self.ui.frozen_time_unlocked_checkbox = self.ui.main_panel:checkbox({ id = 'frozen-time-unlocked-checkbox', 
                            width = 30, height = 30, x = -676, y = 475,
                            checked = self.frozen_time_unlocked, onClick = function(_, button)
                                self:setFrozenTimeUnlocked(not self.frozen_time_unlocked)
                            end })

    self.ui.paradox_button = self.ui.main_panel:button({ id = 'paradox-button', fontSize = 40, 
                        width = 70, height = 50, x = -372, y = 475,
                        colors = Ui.TRANSPARENT_INPUT_COLORS, textAlignment = 'MiddleCenter',
                        text = tostring(self.paradox), onClick = function(_, button)
    
            local newValue = self.paradox + (button == '-2' and -1 or 1)
            -- newValue = Utils.clamp(newValue, 0, nil)
            self:setParadox(newValue)
        end })

    ------------------------
    -- Argo fate section
    self.ui.argo_fate_button = self.ui.main_panel:button({ id = 'argo-fate-button', fontSize = 40, 
                        width = 55, height = 54, x = -305, y = 720,
                        colors = Ui.TRANSPARENT_INPUT_COLORS, textAlignment = 'MiddleCenter',
                        text = tostring(self.argo_fate), onClick = function(_, button)

        self.argo_fate = self.argo_fate + (button == '-2' and -1 or 1)
        self.argo_fate = Utils.clamp(self.argo_fate, 0, 10)
        self.ui.argo_fate_button:setText(self.argo_fate)
        Log:debug('Argo fate set to %s', self.argo_fate)

        if self.argo_fate >= 10 then
            broadcastToAll('Read 0273 immediately.', Constants.WARNING_COLOR)
        end
    end })

    self.ui.argo_knowledge_button = self.ui.main_panel:button({ id = 'argo-knowledge-button', fontSize = 40, 
                        width = 80, height = 50, x = -102, y = 649,
                        colors = Ui.TRANSPARENT_INPUT_COLORS, textAlignment = 'MiddleCenter',
                        text = tostring(self.argo_knowledge), onClick = function(_, button)
        
        self.argo_knowledge = self.argo_knowledge + (button == '-2' and -1 or 1)
        self.argo_knowledge = Utils.clamp(self.argo_knowledge, 40, nil)
        self.ui.argo_knowledge_button:setText(self.argo_knowledge)
        Log:debug('Argo knowledge set to %s', self.argo_knowledge)
    end })

    ------------------------
    -- Hull/Crew
    self.ui.hull_group = self.ui.main_panel:checkboxGroup({ id = 'hull-group', onClick = function(checkbox)
        self:setHull(checkbox.checkboxValue)
    end })

    local maxCheckboxes = 7
    for i = maxCheckboxes, 0, -1 do
        self.ui['hull_'..i..'_checkbox'] = self.ui.hull_group:checkbox({ id = 'hull-'..i..'-checkbox', 
                            width = 100, height = 100, x = -1015 + (maxCheckboxes-i) * 82.5 + (i < 6 and 12.5 or 0), y = 349,
                            checked = (self.hull == i) }, true)
        self.ui['hull_'..i..'_checkbox'].checkboxValue = i
    end

    self.ui['hull_unlocked_checkbox'] = self.ui.main_panel:checkbox({ id = 'hull-unlocked-checkbox', 
                            width = 50, height = 50, x = -983, y = 345,
                            checked = self.hull_unlocked, onClick = function(_, button)
                                self:setHullUnlocked(not self.hull_unlocked)
                            end })

    self.ui.crew_group = self.ui.main_panel:checkboxGroup({ id = 'crew-group', onClick = function(checkbox)
        self:setCrew(checkbox.checkboxValue)
    end })

    local maxCheckboxes = 10
    for i = maxCheckboxes, 0, -1 do
        self.ui['crew_'..i..'_checkbox'] = self.ui.crew_group:checkbox({ id = 'crew-'..i..'-checkbox', 
                            width = 100, height = 100, x = -1020 + (maxCheckboxes-i) * 82.5 + (i < 9 and 15 or 0), y = 252,
                            checked = (self.crew == i) }, true)
        self.ui['crew_'..i..'_checkbox'].checkboxValue = i
    end

    self.ui['crew_unlocked_checkbox'] = self.ui.main_panel:checkbox({ id = 'crew-unlocked-checkbox', 
                            width = 50, height = 50, x = -988, y = 250,
                            checked = self.crew_unlocked, onClick = function(_, button)
                                self:setCrewUnlocked(not self.crew_unlocked)
                            end })

    ------------------------
    -- Titans
    self.ui.abilities_limit_input = self.ui.main_panel:input({ id = 'abilities-limit-input', width = 95, height = 45, x = -85, y = 166, 
                        fontSize = 45, placeholder = ' ', text = tostring(self.abilities_limit), colors = Ui.TRANSPARENT_INPUT_COLORS,
                        textAlignment = 'MiddleCenter', characterValidation = 'Integer', onValueChanged = function(_, value) 
                            self:setAbilitiesLimit(value)
                        end })
    self.ui.current_titans_input = self.ui.main_panel:input({ id = 'current-titans-input', width = 60, height = 45, x = -112, y = 115.5,
                        fontSize = 35, placeholder = ' ', text = tostring(self.current_titans or ''), colors = Ui.TRANSPARENT_INPUT_COLORS,
                        textAlignment = 'MiddleCenter', characterValidation = 'Integer', onValueChanged = function(_, value) 
                            self:setCurrentTitans(value)
                        end })
    self.ui.max_titans_input = self.ui.main_panel:input({ id = 'max-titans-input', width = 60, height = 45, x = -64, y = 115.5,
                        fontSize = 35, placeholder = ' ', text = tostring(self.max_titans or ''), colors = Ui.TRANSPARENT_INPUT_COLORS,
                        textAlignment = 'MiddleCenter', characterValidation = 'Integer', onValueChanged = function(_, value) 
                            self:setTitansLimit(value)
                        end })

    for index, text in ipairs(self.titans_list1) do
        self.ui['titans_input1_line' .. index] = self.ui.main_panel:input({ id = 'titans-list1-input-' .. index, fontSize = 30, 
                                colors = Ui.TRANSPARENT_INPUT_COLORS, width = 585, height = 40, x = -952, y = 100 + (index-1)*-34 ,
                                text = text, placeholder = ' ', onValueChanged = function(_, value)
                                    self:setTitansList1(index, value)
                                end })
    end

    for index, text in ipairs(self.titans_list2) do
        self.ui['titans_input2_line' .. index] = self.ui.main_panel:input({ id = 'titans-list2-input-' .. index, fontSize = 30, 
                                colors = Ui.TRANSPARENT_INPUT_COLORS, width = (index == 1 and 485 or 585), height = 40, x = (index == 1 and -390 or -343), y = 100 + (index-1)*-34 ,
                                text = text, placeholder = ' ', onValueChanged = function(_, value)
                                    self:setTitansList2(index, value)
                                end })
    end

    ------------------------
    -- Adventure tracks
    local xStart, yStart = -1007, -356
    local xStep = 50
    local xOffset, yOffset = 386, -97
    -- Named array for ordering purposes
    local ordering = {
        Constants.ROAD_LESS_TRAVELED, Constants.CHILDREN_OF_THE_SUN, Constants.WHAT_WE_LEFT_BEHIND,
        Constants.OF_WAX_AND_PROMISES, Constants.CANT_GO_BACK, Constants.SIN_OF_THE_FATHERS,
        Constants.COMING_OF_AGE,
    }

    for adventureIndex, adventureName in ipairs(ordering) do
        local adventure = self.adventure_tracks[adventureName]

        for index, value in ipairs(adventure) do
            -- Calculate it, in cycle 1 it's 3 columns and 3 rows
            local x = xStart + (index - math.ceil(#adventure / 2) - ((#adventure % 2) == 0 and 0.5 or 0)) * xStep + xOffset * ((adventureIndex - 1) % 3)
                                    + (adventureIndex % 3 == 2 and 27 or 0) -- + (adventureIndex % 3 >= 2 and 2 or 0)
            local y = yStart + yOffset * math.floor((adventureIndex - 1)/3)

            if value == true or value == false then
                self.ui[adventureName .. '_track_input_' .. index] = self.ui.main_panel:checkbox({ 
                            id = adventureName .. '-track-input-' .. index, 
                            width = 65, height = 65, x = x, y = y,
                            checked = value, onClick = function(_, button)
                                self:setAdventureTrack(adventureName, index, not adventure[index])
                            end })
            else
                self.ui[adventureName .. '_track_input_' .. index] = self.ui.main_panel:input({
                            id = adventureName .. '-track-input-' .. index, colors = Ui.TRANSPARENT_INPUT_COLORS,
                            text = ((tonumber(adventure[index]) or 0) > 0 and tostring(adventure[index])) or '',
                            width = 58, height = 50, x = x, y = y, textAlignment = 'MiddleCenter',
                            characterLimit = 2, characterValidation = 'Integer', fontSize = 35, placeholder = ' ', onValueChanged = function(_, newValue) 
                                self:setAdventureTrack(adventureName, index, newValue)
                            end})
            end
        end
    end
    
    ------------------------
    -- Diplomacy tracks
    local cycleTracks = self.diplomacy_tracks
    local xStart, yStart = -1400, -765
    for index, factionName in ipairs({ Constants.SUNHEIRS, Constants.DELPHIANS, Constants.TWILIGHT_WATCH }) do
        self.ui[factionName .. '_checkbox_group'] = self.ui.main_panel:checkboxGroup({ id = factionName .. '-checkbox-group', onClick = function(checkbox)
            checkbox:select()
            cycleTracks[factionName] = checkbox.checkboxValue
            Log:debug(factionName .. ' diplomacy set to %s', cycleTracks[factionName])
        end })

        for i = 0, 20 do
            local jump = 0
            if i >= 1 then jump = jump + 34 end
            if i >= 6 then jump = jump + 18 end
            if i >= 10 then jump = jump + 22 end
            if i >= 14 then jump = jump + 22 end
            if i >= 18 then jump = jump + 16 end

            self.ui[factionName .. '_'..i..'_checkbox'] = self.ui[factionName .. '_checkbox_group']:checkbox({ id = factionName .. '-'..i..'-checkbox', 
                                width = 50, height = 50, x = xStart + jump + (10 + i) * 41, y = yStart + (index - 1) * -49,
                                checked = (cycleTracks[factionName] == i) }, true)
            self.ui[factionName .. '_'..i..'_checkbox'].checkboxValue = i
        end
    end
    
    ------------------------
    -- Godforms
    -- If checkbox checked -> set to true
    -- If text entered -> set to the text
    -- Otherwise set it to nil
    local xStart, yStart = 80, 739
    for index = 1, 6 do
        self.ui['godform_'..index..'_checkbox'] = self.ui.main_panel:checkbox({ id = 'godform-' .. index .. '-checkbox',
                            checked = (self.godforms[index] ~= nil), width = 65, height = 65,
                            x = xStart, y = yStart + (index-1) * -55, onClick = function(_, button)
                                if self.godforms[index] == nil then
                                    self.godforms[index] = true
                                    self.ui['godform_'..index..'_checkbox']:setChecked(true)
                                    Log:debug('Godform %s activated.', index)
                                else
                                    self.godforms[index] = nil
                                    self.ui['godform_'..index..'_checkbox']:setChecked(false)
                                    self.ui['godform_'..index..'_input']:setText('')
                                    Log:debug('Godform %s deactivated.', index)
                                end
                            end })

        self.ui['godform_'..index..'_input'] = self.ui.main_panel:input({ id = 'godform-' .. index .. '-input',
                            text = (self.godforms[index] == true and '') or self.godforms[index], width = 500, height = 50,
                            fontSize = 40, colors = Ui.TRANSPARENT_INPUT_COLORS, placeholder = ' ',
                            x = xStart + 290, y = yStart + 10 + (index-1) * -55, onValueChanged = function(_, newValue)
                                self.godforms[index] = newValue
                                Log:debug('Godform %s set to %s', index, newValue)

                                if self.godforms[index] == '' then
                                    self.godforms[index] = nil
                                    self.ui['godform_'..index..'_checkbox']:setChecked(false)
                                    Log:debug('Godform %s deactivated.', index)
                                elseif self.godforms[index] and self.godforms[index] ~= '' then
                                    self.ui['godform_'..index..'_checkbox']:setChecked(true)
                                    Log:debug('Godform %s activated.', index)
                                end
                            end })
    end

    ------------------------
    -- Summons
    -- If checkbox checked -> set to true
    -- If text entered -> set to the text
    -- Otherwise set it to nil
    self.ui.summons_limit_button = self.ui.main_panel:button({ id = 'summons-button', fontSize = 40, 
                        width = 55, height = 55, x = 1225, y = 795,
                        colors = Ui.TRANSPARENT_INPUT_COLORS, textAlignment = 'MiddleCenter',
                        text = tostring(self.summons_limit), onClick = function(_, button)
        
        self.summons_limit = self.summons_limit + (button == '-2' and -1 or 1)
        self.summons_limit = Utils.clamp(self.summons_limit, 0, nil)
        self.ui.summons_limit_button:setText(self.summons_limit)
        Log:debug('Summons limit set to %s', self.summons_limit)
    end })

    local xStart, yStart = 703, 739
    for index = 1, 6 do
        self.ui['summon_'..index..'_checkbox'] = self.ui.main_panel:checkbox({ id = 'summon-' .. index .. '-checkbox',
                            checked = (self.summons[index] ~= nil), width = 65, height = 65,
                            x = xStart, y = yStart + (index-1) * -55, onClick = function(_, button)
                                if self.summons[index] == nil then
                                    self.summons[index] = true
                                    self.ui['summon_'..index..'_checkbox']:setChecked(true)
                                    Log:debug('Summon %s activated.', index)
                                else
                                    self.summons[index] = nil
                                    self.ui['summon_'..index..'_checkbox']:setChecked(false)
                                    self.ui['summon_'..index..'_input']:setText('')
                                    Log:debug('Summon %s deactivated.', index)
                                end
                            end })

        self.ui['summon_'..index..'_input'] = self.ui.main_panel:input({ id = 'summon-' .. index .. '-input',
                            text = self.summons[index], width = 500, height = 50,
                            fontSize = 40, colors = Ui.TRANSPARENT_INPUT_COLORS, placeholder = ' ',
                            x = xStart + 290, y = yStart + 10 + (index-1) * -55, onValueChanged = function(_, newValue)
                                self.summons[index] = newValue
                                Log:debug('Summon %s set to %s', index, newValue)

                                if self.summons[index] == '' then
                                    self.summons[index] = nil
                                    self.ui['summon_'..index..'_checkbox']:setChecked(false)
                                    Log:debug('Summon %s deactivated.', index)
                                elseif self.summons[index] and self.summons[index] ~= '' then
                                    self.ui['summon_'..index..'_checkbox']:setChecked(true)
                                    Log:debug('Summon %s activated.', index)
                                end
                            end })
    end

    ------------------------
    -- Evolution tracks
    local xStart, yStart = 621, 236
    for index, level in ipairs(self.evolution_track) do
        local x = xStart + (index - 1) * 47.5
        local y = yStart

        if level[Constants.MIXED] ~= nil then
            self.ui['evolution_' .. index .. '_' .. Constants.MIXED .. '_checkbox'] = 
                            self.ui.main_panel:checkbox({ id = 'evolution-' .. index .. '-' .. Constants.MIXED .. '-checkbox',
                                        checked = level[Constants.MIXED], width = 55, height = 55,
                                        x = x, y = y, onClick = function(_, button)
                                            level[Constants.MIXED] = not level[Constants.MIXED]
                                            self.ui['evolution_' .. index .. '_' .. Constants.MIXED .. '_checkbox']:setChecked(level[Constants.MIXED])
                                            Log:debug('Evolution track section %s set to %s.', index, tostring(level[Constants.MIXED]))

                                            if(level[Constants.MIXED]) then
                                                -- Find the correct level, up to the current evolution level
                                                local lastMarkedHypertimeOracleIndex, lastMarkedIcarianHarpyIndex = 0, 0
    
                                                for jndex, element in ipairs(self:getEvolutionTrack()) do
                                                    if jndex >= index then break end

                                                    if element[Constants.HYPERTIME_ORACLE] == true then
                                                        lastMarkedHypertimeOracleIndex = jndex
                                                    end

                                                    if element[Constants.ICARIAN_HARPY] == true then
                                                        lastMarkedIcarianHarpyIndex = jndex
                                                    end
                                                end

                                                local allowHypertimeOracle, allowIcarianHarpy = false, false
                                                if index == lastMarkedHypertimeOracleIndex + 1 then allowHypertimeOracle = true end
                                                if index == lastMarkedIcarianHarpyIndex + 1 then allowIcarianHarpy = true end

                                                -- Let the player choose which Primordial to setup
                                                local confirmationText = 'Which primordial do you want to setup?'
                                                if not allowHypertimeOracle and not allowIcarianHarpy then confirmationText = 'You cannot fill this box' end

                                                GlobalUi.showConfirmationDialog(confirmationText, (allowHypertimeOracle and 'Hypertime Oracle') or false, (allowHypertimeOracle and function()
                                                    Battle.setupBattle('Hypertime Oracle Battle', self.EVOLUTION_INDEX_TO_LEVEL[self.cycle][index])
                                                end) or nil, (allowIcarianHarpy and 'Icarian Harpy') or false, (allowIcarianHarpy and function()
                                                    Battle.setupBattle('Icarian Harpy Battle', self.EVOLUTION_INDEX_TO_LEVEL[self.cycle][index])
                                                end) or nil)
                                            end
                                        end })
        else
            if level[Constants.HYPERTIME_ORACLE] ~= nil then
                y = yStart + 27
                self.ui['evolution_' .. index .. '_' .. Constants.HYPERTIME_ORACLE .. '_checkbox'] = 
                            self.ui.main_panel:checkbox({ id = 'evolution-' .. index .. '-' .. Constants.HYPERTIME_ORACLE .. '-checkbox',
                                        checked = level[Constants.HYPERTIME_ORACLE], width = 55, height = 55,
                                        x = x, y = y, onClick = function(_, button)
                                            level[Constants.HYPERTIME_ORACLE] = not level[Constants.HYPERTIME_ORACLE]
                                            self.ui['evolution_' .. index .. '_' .. Constants.HYPERTIME_ORACLE .. '_checkbox']:setChecked(level[Constants.HYPERTIME_ORACLE])
                                            Log:debug('Evolution track section %s-%s set to %s.', index, Constants.HYPERTIME_ORACLE, tostring(level[Constants.HYPERTIME_ORACLE]))

                                            if level[Constants.HYPERTIME_ORACLE] == true then
                                                GlobalUi.showConfirmationDialog('Do you want to setup Hypertime Oracle Battle - Level ' 
                                                                .. self.EVOLUTION_INDEX_TO_LEVEL[self.cycle][index] .. '?', 'Yes', function()
                                                    Battle.setupBattle('Hypertime Oracle Battle', self.EVOLUTION_INDEX_TO_LEVEL[self.cycle][index])
                                                end)
                                            end
                                        end })
            end

            if level[Constants.ICARIAN_HARPY] ~= nil then
                y = yStart - 26
                self.ui['evolution_' .. index .. '_' .. Constants.ICARIAN_HARPY .. '_checkbox'] = 
                            self.ui.main_panel:checkbox({ id = 'evolution-' .. index .. '-' .. Constants.ICARIAN_HARPY .. '-checkbox',
                                        checked = level[Constants.ICARIAN_HARPY], width = 55, height = 55,
                                        x = x, y = y, onClick = function(_, button)
                                            level[Constants.ICARIAN_HARPY] = not level[Constants.ICARIAN_HARPY]
                                            self.ui['evolution_' .. index .. '_' .. Constants.ICARIAN_HARPY .. '_checkbox']:setChecked(level[Constants.ICARIAN_HARPY])
                                            Log:debug('Evolution track section %s-%s set to %s.', index, Constants.ICARIAN_HARPY, tostring(level[Constants.ICARIAN_HARPY]))
                                            
                                            if level[Constants.ICARIAN_HARPY] == true then
                                                GlobalUi.showConfirmationDialog('Do you want to setup Icarian Harpy Battle - Level ' 
                                                                    .. self.EVOLUTION_INDEX_TO_LEVEL[self.cycle][index] .. '?', 'Yes', function()
                                                        Battle.setupBattle('Icarian Harpy Battle', self.EVOLUTION_INDEX_TO_LEVEL[self.cycle][index])
                                                end)
                                                
                                            end
                                        end })
            end
        end
    end

    ------------------------
    -- Boss primordial track
    local xStart, yStart = 364, 91
    local maxCheckboxes = 5
    for index = 1, maxCheckboxes do
        self.ui['boss_'..index..'_checkbox'] = self.ui.main_panel:checkbox({ id = 'boss-' .. index .. '-checkbox',
                                checked = (self.boss_track >= index), width = 55, height = 55,
                                x = xStart + (index-1) * 47, y = yStart, onClick = function(_, button)
                                    if self.boss_track >= index then
                                        self.boss_track = index - 1
                                    else
                                        self.boss_track = index
                                        -- Setup the battle if we add a cross
                                        GlobalUi.showConfirmationDialog('Do you want to setup Endure the Sun Battle - Level ' .. (self.boss_level2 and '2?' or '1?'), 'Yes', function()
                                                    Battle.setupBattle('Endure the Sun Battle', self.boss_level2 and Constants.LEVEL_2 or Constants.LEVEL_1)
                                        end)
                                    end

                                    for jndex = 1, self.boss_track do
                                        self.ui['boss_'..jndex..'_checkbox']:setChecked(true)
                                    end

                                    for jndex = self.boss_track + 1, maxCheckboxes do
                                        self.ui['boss_'..jndex..'_checkbox']:setChecked(false)
                                    end
                                    
                                    Log:debug('Boss track set to %s.', self.boss_track)
                                end })
    end

    self.ui['boss_level2_checkbox'] = self.ui.main_panel:checkbox({ id = 'boss-level2-checkbox',
                                checked = self.boss_level2, width = 200, height = 55,
                                checkedImage = 'bossLevel2', uncheckedImage = 'bossLevel2',
                                x = xStart - 170, y = yStart - 60, onClick = function(_, button)
                                    self.boss_level2 = not self.boss_level2

                                    if self.boss_level2 then
                                        self.ui['boss_level2_checkbox']:setChecked(true)
                                    else
                                        self.ui['boss_level2_checkbox']:setChecked(false)
                                    end
                                    
                                    Log:debug('Boss set to level 2 = %s', tostring(self.boss_level2))
                                end })

    ------------------------
    -- Adversary track
    local xStart = 995
    local yStart = 91
    self.ui['adversary_unlocked_checkbox'] = self.ui.main_panel:checkbox({ id = 'adversary-unlocked-checkbox',
                                checked = self.adversary_unlocked, width = 50, height = 50,
                                x = xStart - 45, y = yStart, onClick = function(_, button)
                                    self.adversary_unlocked = not self.adversary_unlocked
                                    self.ui['adversary_unlocked_checkbox']:setChecked(self.adversary_unlocked)
                                    Log:debug('Adversary unlocked set to %s.', tostring(self.adversary_unlocked))
                                end })

    for index = 1, 5 do
        self.ui['adversary_'..index..'_checkbox'] = self.ui.main_panel:checkbox({ id = 'adversary-' .. index .. '-checkbox',
                                checked = (self.adversary_track >= index), width = 55, height = 55,
                                x = xStart + (index-1) * 47, y = yStart, onClick = function(_, button)
                                    if self.adversary_track >= index then
                                        self.adversary_track = index - 1
                                    else
                                        self.adversary_track = index
                                        -- Setup the battle if we add a cross
                                        GlobalUi.showConfirmationDialog('Do you want to setup Burden Hardest to Bear Battle - Level 1?', 'Yes', function()
                                            Battle.setupBattle('Burden Hardest to Bear Battle', Constants.LEVEL_1)
                                        end)
                                    end

                                    for jndex = 1, self.adversary_track do
                                        self.ui['adversary_'..jndex..'_checkbox']:setChecked(true)
                                    end

                                    for jndex = self.adversary_track + 1, 5 do
                                        self.ui['adversary_'..jndex..'_checkbox']:setChecked(false)
                                    end
                                    
                                    Log:debug('Adversary track set to %s.', self.adversary_track)
                                end })
    end

    ------------------------
    -- Mortal resource track
    local xStart, yStart = 76, -159
    -- This requires a named loop to keep the resources order....
    for index, resource in ipairs({'sirenshell', 'hyperborean_alloy', 'daedalus_makina'}) do
        self.ui[resource .. '_button'] = self.ui.main_panel:button({ id = resource .. '-button', fontSize = 40, 
                            width = 55, height = 55, 
                            x = xStart, y = yStart + (index-1) * -138 + (index == 3 and 5 or 0), -- Somehow the boxes aren't linear
                            colors = Ui.TRANSPARENT_INPUT_COLORS, textAlignment = 'MiddleCenter',
                            text = tostring(self.resources[resource]), onClick = function(_, button)
            
                local newValue = self.resources[resource] + (button == '-2' and -1 or 1)
                newValue = Utils.clamp(newValue, 0, nil)
                self:setResource(resource, newValue)
        end })

        for jndex = 1, 2 do
            self.ui[resource .. '_note_input_' .. jndex] = self.ui.main_panel:input({ id = resource .. '-note-button-' .. jndex,
                                fontSize = 24, width = 240, height = 35, textAlignment = 'LeftCenter',
                                x = xStart + 90, y = yStart - 54 + (index-1) * -132 + (jndex-1) * -28, -- Somehow the boxes aren't linear
                                colors = Ui.TRANSPARENT_INPUT_COLORS, placeholder = ' ',
                                text = self.resources[resource .. '_note'][jndex], onValueChanged = function(_, newValue)
                
                self:setResourceNote(resource, jndex, newValue)
            end })
        end
    end

    -- Primordial resources
    local xStart, yStart = 352, -159
    local xOffset, yOffset = 223, -137
    local resourcesArray = {'living_abyss', 'skin_of_malice', 'clothflesh', 'eyes_cluster', 'razorclaw', 
                'icarian_feather', 'writhing_tentacle', 'sunburned_skull', 'grotesque_beak', 'powdered_matter', 
                'retractable_mechanism', 'reliefshell_fragment', 'frozen_ambrosia'}
    for index, resource in ipairs(resourcesArray) do
        local x = xStart + xOffset * ((index - 1) % 4) + ((index % 4 == 0 and 24 or 0)) -- + (((index == 3 or index == 7) and -5) or 0) -- Fix some inconsistencies
        local y = yStart + yOffset * math.floor((index - 1)/4) + (index >= 9 and 6 or 0) + (index >= 13 and 4 or 0)

        self.ui[resource .. '_button'] = self.ui.main_panel:button({ id = resource .. '-button', fontSize = 40, 
                            width = 55, height = 55, x = x, y = y, 
                            colors = Ui.TRANSPARENT_INPUT_COLORS, textAlignment = 'MiddleCenter',
                            text = tostring(self.resources[resource]), onClick = function(_, button)
            
                local newValue = self.resources[resource] + (button == '-2' and -1 or 1)
                newValue = Utils.clamp(newValue, 0, nil)
                self:setResource(resource, newValue)
        end })

        for jndex = 1, 2 do
            self.ui[resource .. '_note_input_' .. jndex] = self.ui.main_panel:input({ id = resource .. '-note-button-' .. jndex, 
                                fontSize = 24, width = 220, height = 35, x = x + 84, y = y - 54 + (index > 4 and 7 or 0) + (jndex-1) * -28,
                                colors = Ui.TRANSPARENT_INPUT_COLORS, placeholder = ' ',
                                text = self.resources[resource .. '_note'][jndex], onValueChanged = function(_, newValue)
                
                self:setResourceNote(resource, jndex, newValue)
            end })
        end
    end

    for jndex = 1, 2 do
        self.ui['cores_note_input_' .. jndex] = self.ui.main_panel:input({ id = 'cores-note-button-' .. jndex, fontSize = 24, 
                            width = 445, height = 35, x = 772, y = -607 + (jndex-1) * -28,
                            colors = Ui.TRANSPARENT_INPUT_COLORS, placeholder = ' ',
                            text = self.resources['cores_note'][jndex], onValueChanged = function(_, newValue)
            
                self:setResourceNote('cores', jndex, newValue)
        end })
    end

    for jndex = 1, 2 do
        self.ui['rare_resources_note_input_' .. jndex] = self.ui.main_panel:input({ id = 'rare_resources-note-button-' .. jndex, fontSize = 24, 
                            width = 265, height = 35, x = 1128, y = -607 + (jndex-1) * -28,
                            colors = Ui.TRANSPARENT_INPUT_COLORS, placeholder = ' ',
                            text = self.resources['rare_resources_note'][jndex], onValueChanged = function(_, newValue)
            
                self:setResourceNote('rare_resources', jndex, newValue)
        end })
    end

    ------------------------
    -- Divine resources
    local xStart, yStart = 79, -806
    for index, resource in ipairs({'priests', 'echoes_of_recollection', 'sisyphus_tears', 'pygmalion_stones'}) do
        self.ui[resource .. '_button'] = self.ui.main_panel:button({ id = resource .. '-button', fontSize = 40, 
                            width = 55, height = 55, x = xStart + (index-1) * 306 + (index >= 3 and 2 or 0) + (index >= 4 and -6 or 0), y = yStart, 
                            colors = Ui.TRANSPARENT_INPUT_COLORS, textAlignment = 'MiddleCenter',
                            text = tostring(self.resources[resource]), onClick = function(_, button)
            
            local newValue = self.resources[resource] + (button == '-2' and -1 or 1)
            newValue = Utils.clamp(newValue, 0, nil)
            self:setResource(resource, newValue)
        end })
        
        for jndex = 1, 2 do
            self.ui[resource .. '_note_input_' .. jndex] = self.ui.main_panel:input({ id = resource .. '-note-button-' .. jndex, 
                                    fontSize = 24, width = 300, height = 35, x = xStart + 118 + (index-1) * 307 + (index >= 3 and -2 or 0) + (index >= 4 and -6 or 0), y = yStart - 54 + (jndex-1) * -28,
                                    colors = Ui.TRANSPARENT_INPUT_COLORS, placeholder = ' ',
                                    text = self.resources[resource .. '_note'][jndex], onValueChanged = function(_, newValue)
                    
                self:setResourceNote(resource, jndex, newValue)
            end })
        end
    end
end

function Argo:getLevelFromEvolutionIndex(cycle, index)
    return self.EVOLUTION_INDEX_TO_LEVEL[cycle][index]
end

function Argo:getEvolutionTrack()
    return self.evolution_track
end

function Argo:setHull(hull)
    self.ui['hull_'..hull..'_checkbox']:select()
    self.hull = hull
    Log:debug('Cycle %s - Hull set to %s', self.cycle, self.hull)

    if self.hull == 0 then
        broadcastToAll('Read 0415 immediately.', Constants.WARNING_COLOR)
    end
end

function Argo:setHullUnlocked(unlocked)
    self.hull_unlocked = unlocked
    self.ui['hull_unlocked_checkbox']:setChecked(self.hull_unlocked)
    Log:debug('Cycle %s - Hull unlocked set to %s.', self.cycle, tostring(self.hull_unlocked))
end

function Argo:setCrew(crew)
    self.ui['crew_'..crew..'_checkbox']:select()
    self.crew = crew
    Log:debug('Cycle %s - Crew set to %s', self.cycle, self.crew)

    if self.crew == 0 then
        broadcastToAll('Read 0562 immediately.', Constants.WARNING_COLOR)
    end
end

function Argo:setCrewUnlocked(unlocked)
    self.crew_unlocked = unlocked
    self.ui['crew_unlocked_checkbox']:setChecked(self.crew_unlocked)
    Log:debug('Cycle %s - Crew unlocked set to %s.', self.cycle, tostring(self.crew_unlocked))
end

function Argo:setStoryCard(card)
    self.story_card = card
    self.ui.story_card_input:setText(self.story_card)
    Log:debug('Cycle %s - Story card set to %s', self.cycle, self.story_card)
end

function Argo:setDoomCard(card)
    self.doom_card = card
    self.ui.doom_card_input:setText(self.doom_card)
    Log:debug('Cycle %s - Doom card set to %s', self.cycle, self.doom_card)
end

function Argo:setMapTile(value)
    self.map_tile = value
    self.ui.map_tile_input:setText(self.map_tile)
    Log:debug('Cycle %s - Map tile set to %s', self.cycle, self.map_tile)
end

function Argo:setHumanity(value)
    self.humanity = value
    self.ui.humanity_button:setText(self.humanity)
    Log:debug('Cycle %s - Humanity set to %s', self.cycle, self.humanity)
end

function Argo:setLoopLength(value)
    self.loop_length = value
    self.ui.loop_length_button:setText(self.loop_length)
    Log:debug('Cycle %s - Loop Length set to %s', self.cycle, self.loop_length)
end

function Argo:setDefectors(value)
    self.defectors = value
    self.ui.defectors_button:setText(self.defectors)
    Log:debug('Cycle %s - Defectors set to %s', self.cycle, self.defectors)
end

function Argo:setDefectorsUnlocked(unlocked)
    self.defectors_unlocked = unlocked
    self.ui['defectors_unlocked_checkbox']:setChecked(self.defectors_unlocked)
    Log:debug('Cycle %s - Defectors unlocked set to %s.', self.cycle, tostring(self.defectors_unlocked))
end

function Argo:setFrozenTime(value)
    self.frozen_time = value
    self.ui.frozen_time_button:setText(self.frozen_time)
    Log:debug('Cycle %s - Frozen Time set to %s', self.cycle, self.frozen_time)
end

function Argo:setFrozenTimeUnlocked(unlocked)
    self.frozen_time_unlocked = unlocked
    self.ui['frozen_time_unlocked_checkbox']:setChecked(self.frozen_time_unlocked)
    Log:debug('Cycle %s - Frozen Time unlocked set to %s.', self.cycle, tostring(self.frozen_time_unlocked))
end

function Argo:setParadox(value)
    self.paradox = value
    self.ui.paradox_button:setText(self.paradox)
    Log:debug('Cycle %s - Paradox set to %s', self.cycle, self.paradox)
end

function Argo:setPassenger(index, value)
    self.passengers[index] = value
    self.ui['passengers_' .. index .. '_input']:setText(self.passengers[index])
    Log:debug('Cycle %s - Passenger %s set to %s', self.cycle, index, self.passengers[index])
end

function Argo:setAbilitiesLimit(limit)
    self.abilities_limit = limit
    self.ui.abilities_limit_input:setText(self.abilities_limit)
    Log:debug('Cycle %s - Abilities limit set to %s', self.cycle, self.abilities_limit)
end

function Argo:setTitansLimit(titans)
    self.max_titans = titans
    self.ui.max_titans_input:setText(self.max_titans)
    Log:debug('Cycle %s - Max titans set to %s', self.cycle, self.max_titans)
end

function Argo:setCurrentTitans(titans)
    self.current_titans = titans
    self.ui.current_titans_input:setText(self.current_titans)
    Log:debug('Cycle %s - Current titans set to %s', self.cycle, self.current_titans)
end

function Argo:setEvolutionTrack(index, type, value)
    if not self.evolution_track[index] or self.evolution_track[index][type] == nil then return end
    if value ~= true and value ~= false then return end

    self.evolution_track[index][type] = value
    self.ui['evolution_' .. index .. '_' .. type .. '_checkbox']:setChecked(value)
    Log:debug('Cycle %s - Evolution track section %s set to %s.', self.cycle, index, tostring(self.evolution_track[index][type]))
end

function Argo:setTitansList1(boxIndex, value)
    self.titans_list1[boxIndex] = value
    self.ui['titans_input1_line' .. boxIndex]:setText(value)
    Log:debug('Cycle %s - Titans list 1 line %s set to %s', self.cycle, boxIndex, self.titans_list1[boxIndex])
end

function Argo:setTitansList2(boxIndex, value)
    self.titans_list2[boxIndex] = value
    self.ui['titans_input2_line' .. boxIndex]:setText(value)
    Log:debug('Cycle %s - Titans list 2 line %s set to %s', self.cycle, boxIndex, self.titans_list2[boxIndex])
end

function Argo:setAdventureTrack(adventureName, boxIndex, value)
    if not self.adventure_tracks[adventureName] or not self.adventure_tracks[adventureName][boxIndex] == nil then return end

    if self.adventure_tracks[adventureName][boxIndex] == true or self.adventure_tracks[adventureName][boxIndex] == false then
        self.ui[adventureName .. '_track_input_' .. boxIndex]:setChecked(value)
        self.adventure_tracks[adventureName][boxIndex] = value
        Log:debug('Cycle %s - Adventure track for [%s - space %s] set to %s', self.cycle, adventureName, boxIndex, tostring(value))
    else
        self.ui[adventureName .. '_track_input_' .. boxIndex]:setText(tonumber(value) or '')
        self.adventure_tracks[adventureName][boxIndex] = tonumber(value) or 0
        Log:debug('Cycle %s - Adventure track for [%s - space %d] set to %s', self.cycle, adventureName, boxIndex, tonumber(value) or 0)
    end
end

function Argo:setResource(resourceName, value)
    if self.resources[resourceName] == nil then return end
    
    self.resources[resourceName] = value

    -- Only do it once on 100 (avoid unecessary sets)
    if self.resources[resourceName] == 100 then
        self.ui[resourceName .. '_button']:setFontSize(35)
        self.ui[resourceName .. '_button']:setWidth(70)
    elseif self.resources[resourceName] == 99 then
        self.ui[resourceName .. '_button']:setFontSize(40)
        self.ui[resourceName .. '_button']:setWidth(55)
    end
    self.ui[resourceName .. '_button']:setText(self.resources[resourceName])
    Log:debug('Cycle %s - Resource %s set to %s', self.cycle, resourceName, self.resources[resourceName])
end

function Argo:setResourceNote(resourceName, line, value)
    if self.resources[resourceName .. '_note'] == nil then return end

    self.resources[resourceName .. '_note'][line] = value
    Log:debug('Cycle %s - Note for resource %s set to %s', self.cycle, resourceName, self.resources[resourceName .. '_note'][line])
end

function Argo.save()
    local flatData = {}
    
    for cycle, argo in pairs(Argo.DATA) do
        flatData[cycle] = {
            cycle = argo.cycle,
            sheetGUID = argo.sheetGUID,

            hull = argo.hull,
            hull_unlocked = argo.hull_unlocked,
            crew = argo.crew,
            crew_unlocked = argo.crew_unlocked,
            story_card = argo.story_card,
            doom_card = argo.doom_card,
            map_tile = argo.map_tile,
            argo_fate = argo.argo_fate,
            argo_knowledge = argo.argo_knowledge,
            abilities_limit = argo.abilities_limit,
            current_titans = argo.current_titans,
            max_titans = argo.max_titans,
            titans_list1 = argo.titans_list1,
            titans_list2 = argo.titans_list2,
            adventure_tracks = argo.adventure_tracks,
            diplomacy_tracks = argo.diplomacy_tracks,
    
            godforms = argo.godforms,
            summons = argo.summons,
            summons_limit = argo.summons_limit,

            evolution_track = argo.evolution_track,
            boss_track = argo.boss_track,
            adversary_name = argo.adversary_name,
            adversary_track = argo.adversary_track,
            adversary_unlocked = argo.adversary_unlocked,

            resources = argo.resources,
        }

        -- Cycle specific elements
        if cycle == Constants.CYCLE_I then
            flatData[cycle].strangers = argo.strangers
        elseif cycle == Constants.CYCLE_II then
            flatData[cycle].passengers = argo.passengers

            flatData[cycle].humanity = argo.humanity
            flatData[cycle].defectors = argo.defectors
            flatData[cycle].defectors_unlocked = argo.defectors_unlocked
        elseif cycle == Constants.CYCLE_III then
            flatData[cycle].loop_length = argo.loop_length
            flatData[cycle].frozen_time = argo.frozen_time
            flatData[cycle].frozen_time_unlocked = argo.frozen_time_unlocked
            flatData[cycle].paradox = argo.paradox

            flatData[cycle].boss_level2 = argo.boss_level2
        end
    end

    return flatData
end

------------------------------------------------------

return {
    init = Argo.init,
    save = Argo.save,
    getLevelFromEvolutionIndex = Argo.getLevelFromEvolutionIndex,
    spawnSheet = Argo.spawnSheet,
    
    getData = Argo.getData,
}
