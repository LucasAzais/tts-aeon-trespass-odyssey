local BattleBoard = {}
BattleBoard.__index = BattleBoard

local Content = require('Content')
local Constants = require('Constants')
local EventManager = require('EventManager')
local Grid = require('Grid')
local Log = require('Log').ForModule('BattleBoard')
local Terrain = require('Terrain')
local Ui = require('Ui')
local Utils = require('Utils')

------------------------------------------------------

BattleBoard.KRATOS_POOL_GUID = '488dbc'
BattleBoard.BOARD_GUID = '77cbc9'
BattleBoard.COLUMNS = 20
BattleBoard.ROWS = 14

-- Stretch the grid
BattleBoard.X_ADJUST = 2.83
BattleBoard.Z_ADJUST = 3.07

-- Slide the grid in a direction
BattleBoard.X_OFFSET = 0.00
BattleBoard.Z_OFFSET = -0.02

function BattleBoard.init()
    BattleBoard.BOARD = getObjectFromGUID(BattleBoard.BOARD_GUID)

    -- Create the grid on the board
    BattleBoard.updateGrid()

    -- Create Kratos Pool UI + Placement Continue button
    BattleBoard.createUi()

    EventManager.addHandler('onObjectDrop', function(_, object)
        -- Only snap appropriate elements
        if object.hasTag(Constants.TERRAIN) 
            or object.hasTag(Constants.PRIMORDIAL)
            or object.hasTag(Constants.TITAN) then

            BattleBoard.snapObjectToGrid(object)
        end
    end)

    -- BattleBoard.grid:showDebugLines()
end

function BattleBoard.createUi()
    BattleBoard.uiRoot = Ui.createRootOnObject('battle-board-root', BattleBoard.BOARD, 2.5)
    BattleBoard.uiRoot:wipe()
    -- BattleBoard.uiRoot.scale = '0.01 0.01'

    local panel = BattleBoard.uiRoot:panel({ id = 'battle-board-panel', width = 1000, height = 1000 })
    BattleBoard.clean_button = panel:button({ id = 'cleanup-kratos-pool-button', width = 200, height = 70,
    -- BattleBoard.clean_button = BattleBoard.uiRoot:button({ id = 'cleanup-kratos-pool-button', width = 200, height = 70,
                                    x = -1580, y = -950, textAlignment = 'MiddleCenter', text = 'Clear', fontSize = 50,
                                    -- x = 158, y = 95, textAlignment = 'MiddleCenter', text = 'Clear', fontSize = 50,
                                    colors = '#FFFFFF|#dbdbdb|#C8C8C8|rgba(0.78,0.78,0.78,0.5)', onClick = function()
                                        local kratosPool = getObjectFromGUID(BattleBoard.KRATOS_POOL_GUID)
                                        for _, object in ipairs(kratosPool.getObjects()) do
                                            if object.type == 'Tile' then object.destruct() end
                                        end
                                    end })
    BattleBoard.clean_button.attributes.fontStyle = 'Bold'

    BattleBoard.continue_button = panel:button({ id = 'battle-board-continue-button', width = 340, height = 90, 
                                    x = 0, y = 0, textAlignment = 'MiddleCenter', text = 'Continue', fontSize = 70, active = false,
                                    colors = '#FFFFFF|#dbdbdb|#C8C8C8|rgba(0.78,0.78,0.78,0.5)', onClick = function() end })
    BattleBoard.continue_button.attributes.fontStyle = 'Bold'
end

function BattleBoard.updateGrid()
    -- Calculate live boundaries of the board
    local bounds = BattleBoard.BOARD.getBounds()
    
    local left = bounds.center.x - bounds.size.x/2 + BattleBoard.X_ADJUST + BattleBoard.X_OFFSET
    local right = bounds.center.x + bounds.size.x/2 - BattleBoard.X_ADJUST + BattleBoard.X_OFFSET
    local top = bounds.center.z + bounds.size.z/2 - BattleBoard.Z_ADJUST + BattleBoard.Z_OFFSET
    local bottom = bounds.center.z - bounds.size.z/2 + BattleBoard.Z_ADJUST + BattleBoard.Z_OFFSET

    local boardWidth = math.abs(right - left)
    local boardHeight = math.abs(top - bottom)
    local cellWidth = boardWidth / (BattleBoard.COLUMNS - 1)
    local cellHeight = boardHeight / (BattleBoard.ROWS - 1)

    -- Consider we remove half a cell on each side and recalculate
    -- Because it's easier to align things if we use the center of each grid space
    left = left + cellWidth / 2
    right = right - cellWidth / 2
    top = top - cellHeight / 2
    bottom = bottom + cellHeight / 2

    BattleBoard.grid = Grid.create({
        object = BattleBoard.BOARD,
        left = left,
        right = right,
        top = top,
        bottom = bottom,
        columns = BattleBoard.COLUMNS,
        rows = BattleBoard.ROWS,
    })
end

function BattleBoard.snapObjectToGrid(object)
    if not object then return end

    local element = nil
    if object.hasTag(Constants.PRIMORDIAL) then
        element = Content.getByName(Content.primordials, object.getName())
    elseif object.hasTag(Constants.TERRAIN) then
        element = Terrain.getTerrain(object.getName())
    end

    local size = nil
    if element then
        size = { width = element.size.width, height = element.size.height }
    elseif object.hasTag(Constants.TITAN) then
        size = { width = 1, height = 1 }
    end

    -- Leave the other objects where they are
    if size == nil then
        return
    end

    local yRot = object.getRotation().y
    if (yRot > 45 and yRot < 135) or (yRot < 315 and yRot > 225) then
        size.width, size.height = size.height, size.width
    end

    -- Default values
    -- size.width = size.width or 1
    -- size.height = size.height or 1

    object.setPositionSmooth(BattleBoard.grid:snapPosition(object, size), false, true)
end

function BattleBoard.getGrid()
    return BattleBoard.grid
end

function BattleBoard.getBoard()
    return BattleBoard.BOARD
end

function BattleBoard.getContinueButton()
    return BattleBoard.continue_button
end

------------------------------------------------------

return {
    init = BattleBoard.init,
    getGrid = BattleBoard.getGrid,
    getBoard = BattleBoard.getBoard,
    getContinueButton = BattleBoard.getContinueButton,
}