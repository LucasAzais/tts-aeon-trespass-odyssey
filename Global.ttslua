-- This project uses Benjamin-Dobell/luabundle git repo to organise this project

-- Naming conventions, hopefully that's understandable
-- Classes: PascalCase
-- Functions: camelCase
-- Global vars: underscore: CONSTANTS_LIKE_THIS and variables_like_this
-- Local vars: camelCase

local Argonaut = require('Argonaut')
local Argo = require('Argo')
local Battle = require('Battle')
local BattleBoard = require('BattleBoard')
local Constants = require('Constants')
local Cycle = require('Cycle')
local GlobalUi = require('GlobalUi')
local Map = require('Map')
local Options = require('Options')
local SearchStation = require('SearchStation')
local Terrain = require('Terrain')
local Timeline = require('Timeline')
local Triskelion = require('Triskelion')
local Ui = require('Ui')
local Log = require('Log').ForModule("Global")

------------------------------------------------------

-- TODO: Create a Terrain class and map the various terrain-card-bags when the mod is loaded to avoid string matching everytime

local NOT_INTERACTABLE = {
    '77cbc9',
}

function onLoad(script_state)
    -- Random seed with a couple of fake numbers
    math.randomseed(os.time())
    math.random(); math.random(); math.random()

    -- Disable non-interactable objects
    for _, objectGUID in ipairs(NOT_INTERACTABLE) do
        getObjectFromGUID(objectGUID).interactable = false
    end

    -- Parse save data
    local savedData = JSON.decode(script_state) or {}
    -- local savedData = {}

    Log.init()
    Ui.init()
    Terrain.init()
    Cycle.init(savedData.cycle or {})
    Options.init(savedData.options or {})
    GlobalUi.init()
    Map.init(savedData.map or {})
    Argo.init(savedData.argo or {})
    Timeline.init(savedData.timeline or {})
    Triskelion.init(savedData.triskelions or {})
    Argonaut.init(savedData.argonauts or {})
    BattleBoard.init()
    Battle.init(savedData.battle or {})
    SearchStation.init()

    -- If in the middle of a cycle, just load the game
    if Options.getCurrentCycle() then
        Ui.globalRefresh(true)
    else
        -- Or show the setup
        Ui.globalRefresh()
        Ui.getRoot():show('campaign-panel')
    end
end

function onSave()
    local dataToSave = {}

    if Options.getCurrentCycle() then
        dataToSave.triskelions = Triskelion.save()
        dataToSave.argonauts = Argonaut.save()
        dataToSave.cycle = Cycle.save()
        dataToSave.argo = Argo.save()
        dataToSave.timeline = Timeline.save()
        dataToSave.battle = Battle.save()
        dataToSave.map = Map.save()
        dataToSave.options = Options.save()
    end

    return JSON.encode(dataToSave)
end
